{"version":3,"sources":["assets/mrrobot.png","api/api.ts","redux/dialogsReducer.ts","assets/preloader.gif","assets/eye.png","components/Login/Login.module.css","components/Footer/Footer.module.css","components/Sidebar/Sidebar.module.css","components/Nav/Nav.module.css","components/Nav/Nav.jsx","components/Photos/Photos.jsx","components/Music/Music.jsx","components/Settings/Settings.jsx","redux/usersReducer.ts","components/Users/Pagination.tsx","components/Users/Users.tsx","redux/userSelectors.ts","components/Users/UsersContainer.tsx","components/Header/Header.jsx","redux/authReducer.ts","components/Header/HeaderComponent.jsx","components/Login/Login.jsx","redux/appReducer.ts","components/Footer/Footer.jsx","components/Sidebar/Sideber.jsx","App.js","serviceWorker.js","redux/reduxStore.ts","index.js","components/Users/Users.module.css","components/common/FormsControls/FormsControls.module.css","components/Users/Pagination.module.css","components/common/FormsControls/FormsControls.jsx","components/common/Preloader/Preloader.jsx","validators/validators.js","components/Header/Header.module.css","redux/profileReducer.ts"],"names":["module","exports","ResultCodesEnum","instance","axios","create","withCredentials","baseURL","headers","usersAPI","getUsers","currentPage","pageSize","get","then","response","data","follow","userId","post","unfollow","delete","profileAPI","getProfile","getStatus","updateStatus","status","put","savePhoto","photoFile","formData","FormData","append","saveProfile","profile","authAPI","me","res","login","email","password","rememberMe","captcha","logout","securityAPI","getCaptchaUrl","sendMessageActionCreator","newMessageText","type","initialState","dialogs","id","name","messages","message","dialogsReducer","state","action","messageText","Nav","className","styles","nav","item","activeClassName","activeLink","to","Photos","Music","Settings","FOLLOW","users","totalUsersCount","isFetching","followingInProgress","followSuccess","unfollowSuccess","setCurrentPage","toggleIsFetching","toggleIsFollowing","usersReducer","map","u","followed","filter","Pagination","totalItemsCount","onPageChange","portionSize","pagesCount","Math","ceil","pages","i","push","portionCount","useState","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","paginator","portionButton","onClick","p","cn","selectedPage","pageNumber","key","Users","props","usersPage","userInList","userName","userPic","alt","src","photos","small","userPhoto","unfollowButton","disabled","some","followButton","createSelector","getPageSize","getTotalUsersCount","getCurrentPage","getIsFetching","getFollowingInProgress","UsersContainer","this","pageTitle","Preloader","isAuth","React","Component","compose","connect","dispatch","getState","a","resultCode","page","items","totalCount","Header","header","logo","logoutButton","captchaUrl","setAuthUserData","payload","getCaptchaUrlSuccess","getAuthUserData","meData","Success","url","authReducer","HeaderComponent","auth","LoginReduxForm","reduxForm","form","handleSubmit","error","onSubmit","Field","placeholder","component","Input","validate","required","formSummaryError","loginButton","loginData","CaptchaIsRequired","messaage","length","stopSubmit","_error","loginStyles","loginPage","initialized","appReducer","Footer","footer","Sidebar","sidebar","DialogsContainer","lazy","ProfileContainer","App","initializeApp","exact","path","render","fallback","app","Boolean","window","location","hostname","match","require","createStore","combineReducers","applyMiddleware","store","profilePage","profileReducer","dialogsPage","formReducer","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","thunkMiddleware","_store_","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","Textarea","input","meta","touched","hasError","formControl","preloader","value","maxLengthCreator","maxLength","ADD_POST","posts","likesCount","getUserProfile","setUserProfile","setStatus","alert","file","savePhotoSuccess","toLowerCase","contacts","Promise","reject","addNewPostActionCreator","newPostText"],"mappings":"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","file":"static/js/main.6bff012e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/mrrobot.97f0a69e.png\";","import axios from 'axios';\nimport {ProfileType} from \"../redux/profileReducer\";\nimport {stringify} from \"querystring\";\n\nconst instance = axios.create({\n    withCredentials: true,\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\n    headers: { 'api-key': '8b8490ba-4ac0-44fd-a386-a1e6ec25d08c' }\n})\n\nexport const usersAPI = {\n    getUsers(currentPage: number, pageSize: number) {\n        return instance.get(`users?page=${currentPage}&count=${pageSize}`)\n            .then(response => response.data)\n    },\n    follow(userId: number) {\n        return instance.post(`follow/${userId}`)\n    },\n    unfollow(userId: number) {\n        return instance.delete(`follow/${userId}`)\n    }\n}\n\nexport const profileAPI = {\n    getProfile(userId: number) {\n        return instance.get(`profile/${userId}`)\n    },\n    getStatus(userId: number) {\n        return instance.get(`profile/status/${userId}`)\n    },\n    updateStatus(status: string) {\n        return instance.put(`profile/status`, { status })\n    },\n    savePhoto(photoFile: any) {\n        const formData = new FormData()\n        formData.append('image', photoFile)\n        return instance.put('profile/photo', formData)\n    },\n    saveProfile(profile: ProfileType) {\n        return instance.put(`profile`, profile)\n    }\n}\n\nexport enum ResultCodesEnum {\n    Success = 0,\n    Error = 1,\n    CaptchaIsRequired = 10\n}\n\ntype MeResponseType = {\n    resultCode: ResultCodesEnum\n    messages: Array<string>\n    data: {\n        id: number\n        email: string\n        login: string\n    }\n}\n\ntype LoginResponseType = {\n    resultCode: ResultCodesEnum\n    messages: Array<string>\n    data: {\n        userId: number\n    }\n}\n\nexport const authAPI = {\n    me() {\n        return instance.get<MeResponseType>(`auth/me`).then(res => res.data)\n    },\n    login(email: string, password: string, rememberMe = false, captcha: null | string = null) {\n        return instance.post<LoginResponseType>(`auth/login`, { email, password, rememberMe, captcha })\n            .then(res => res.data)\n    },\n    logout() {\n        return instance.delete(`auth/login`)\n    }\n}\n\nexport const securityAPI = {\n    getCaptchaUrl() {\n        return instance.get(`security/get-captcha-url`)\n    }\n}","const ADD_MESSAGE = 'dialogs/ADD-MESSAGE';\n\ntype SendMessageActionCreatorType = {\n  type: typeof ADD_MESSAGE\n  newMessageText: string\n}\n\nexport const sendMessageActionCreator = (newMessageText: string):SendMessageActionCreatorType => ({ type: ADD_MESSAGE, newMessageText })\n\ntype DialogType = { \n  id: number \n  name: string \n}\n\ntype MessageType = { \n  id: number \n  message: string \n}\n\nlet initialState = {\n  dialogs: [\n    { id: 1, name: 'Vavan' },\n    { id: 2, name: 'Iren' },\n    { id: 3, name: 'Bieven' },\n    { id: 4, name: 'Kama' },\n    { id: 5, name: 'Maga' },\n    { id: 6, name: 'Konek' }\n  ] as Array<DialogType>,\n  messages: [\n    { id: 1, message: 'Hello' },\n    { id: 2, message: 'What do we get for 10 dollars?' },\n    { id: 3, message: 'Everything' },\n    { id: 4, message: 'Ok alright' }\n  ] as Array<MessageType>\n}\n\nexport type InitialStateType = typeof initialState\n\nconst dialogsReducer = (state = initialState, action: any) => {\n  switch (action.type) {\n    case ADD_MESSAGE:\n      let messageText = action.newMessageText\n      return {\n        ...state,\n        messages: [...state.messages, { id: 5, message: messageText }]\n      }\n    default:\n      return state\n  }\n}\n\nexport default dialogsReducer","module.exports = __webpack_public_path__ + \"static/media/preloader.7f8e1b53.gif\";","module.exports = __webpack_public_path__ + \"static/media/eye.16969707.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loginPage\":\"Login_loginPage__-UEgp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"footer\":\"Footer_footer__1w0lV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"sidebar\":\"Sidebar_sidebar__2WupE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Nav_nav__3gICw\",\"item\":\"Nav_item__96rLj\",\"activeLink\":\"Nav_activeLink__GsTVR\"};","import React from 'react';\nimport styles from './Nav.module.css';\nimport { NavLink } from 'react-router-dom';\n\nfunction Nav() {\n  return (\n    <nav className={styles.nav}>\n      <ul>\n        <li className={styles.item} >\n          <NavLink activeClassName={styles.activeLink} to='/profile'>Profile</NavLink>\n        </li>\n        <li className={styles.item}>\n          <NavLink activeClassName={styles.activeLink} to='/dialogs'>Messages</NavLink>\n        </li>\n        <li className={styles.item}>\n          <NavLink activeClassName={styles.activeLink} to='/users'>Users</NavLink>\n        </li>\n        <li className={styles.item}>\n          <NavLink activeClassName={styles.activeLink} to='/photos'>Photos</NavLink>\n        </li>\n        <li className={styles.item}>\n          <NavLink activeClassName={styles.activeLink} to='/music'>Music</NavLink>\n        </li>\n        <li className={styles.item}>\n          <NavLink activeClassName={styles.activeLink} to='/settings'>Settings</NavLink>\n        </li>\n      </ul>\n    </nav>\n  );\n}\n\nexport default Nav;","import React from 'react';\n\nfunction Photos() {\n  return (\n    <div>\n      Photos\n    </div>\n  );\n}\n\nexport default Photos;\n","import React from 'react';\n\nfunction Music() {\n  return (\n    <div>\n      Music\n    </div>\n  );\n}\n\nexport default Music;\n","import React from 'react';\n\nfunction Settings() {\n  return (\n    <div>\n      Settings\n    </div>\n  );\n}\n\nexport default Settings;\n","import { UsersType } from './../types/types';\nimport { usersAPI } from '../api/api'\nimport {AppStateType} from \"./reduxStore\";\nimport {Dispatch} from \"redux\";\n\nconst FOLLOW = 'users/FOLLOW';\nconst UNFOLLOW = 'users/UNFOLLOW';\nconst SET_USERS = 'users/SET_USERS';\nconst SET_CURRENT_PAGE = 'users/SET_CURRENT_PAGE';\nconst SET_TOTAL_USERS_COUNT = 'users/SET_TOTAL_USERS_COUNT';\nconst TOGGLE_IS_FETCHING = 'users/TOGGLE_IS_FETCHING';\nconst TOGGLE_IS_FOLLOWING_PROGRESS = 'users/TOGGLE_IS_FOLLOWING';\n\nlet initialState = {\n  users: [] as Array<UsersType>,\n  pageSize: 10,\n  totalUsersCount: 0,\n  currentPage: 1,\n  isFetching: true,\n  followingInProgress: [] as Array<number> // array of users ids\n}\n\ntype InitialStateType = typeof initialState\n\nconst usersReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\n\n  switch (action.type) {\n    case FOLLOW:\n      return {\n        ...state,\n        users: state.users.map(u => {\n          if (u.id === action.userId) {\n            return { ...u, followed: true }\n          }\n          return u;\n        }\n        )\n      }\n    case UNFOLLOW:\n      return {\n        ...state,\n        users: state.users.map(u => {\n          if (u.id === action.userId) {\n            return { ...u, followed: false }\n          }\n          return u;\n        }\n        )\n      }\n    case SET_USERS:\n      return { ...state, users: action.users }\n    case SET_CURRENT_PAGE:\n      return { ...state, currentPage: action.currentPage }\n    case SET_TOTAL_USERS_COUNT:\n      return { ...state, totalUsersCount: action.totalUsersCount }\n    case TOGGLE_IS_FETCHING:\n      return { ...state, isFetching: action.isFetching }\n    case TOGGLE_IS_FOLLOWING_PROGRESS:\n      return {\n        ...state,\n        followingInProgress: action.isFetching\n          ? [...state.followingInProgress, action.userId]\n          : state.followingInProgress.filter(id => id !== action.userId)\n      }\n    default:\n      return state\n  }\n}\n\ntype ActionsTypes = FollowSuccesActionType | UnollowSuccesActionType | SetUsersActionType |\n    SetCurrentPageActionType | SetTotalUsersCountActionType | ToggleIsFetchingActionType |\n    ToggleIsFollofingActionType\n\ntype FollowSuccesActionType = {\n  type: typeof FOLLOW\n  userId: number\n}\n\ntype UnollowSuccesActionType = {\n  type: typeof UNFOLLOW\n  userId: number\n}\n\ntype SetUsersActionType = {\n  type: typeof SET_USERS\n  users: Array<UsersType>\n}\n\ntype SetCurrentPageActionType = {\n  type: typeof SET_CURRENT_PAGE\n  currentPage: number\n}\n\ntype SetTotalUsersCountActionType = {\n  type: typeof SET_TOTAL_USERS_COUNT\n  totalUsersCount: number\n}\n\ntype ToggleIsFetchingActionType = {\n  type: typeof TOGGLE_IS_FETCHING\n  isFetching: boolean\n}\n\ntype ToggleIsFollofingActionType = {\n  type: typeof TOGGLE_IS_FOLLOWING_PROGRESS\n  isFetching: boolean\n  userId: number\n}\n\nexport const followSuccess = (userId: number): FollowSuccesActionType => ({ type: FOLLOW, userId })\nexport const unfollowSuccess = (userId: number): UnollowSuccesActionType => ({ type: UNFOLLOW, userId })\nexport const setUsers = (users: Array<UsersType>): SetUsersActionType => ({ type: SET_USERS, users })\nexport const setCurrentPage = (currentPage: number): SetCurrentPageActionType => ({ type: SET_CURRENT_PAGE, currentPage })\nexport const setTotalUsersCount = (totalUsersCount: number): SetTotalUsersCountActionType => ({ type: SET_TOTAL_USERS_COUNT, totalUsersCount })\nexport const toggleIsFetching = (isFetching: boolean): ToggleIsFetchingActionType => ({ type: TOGGLE_IS_FETCHING, isFetching })\nexport const toggleIsFollowing = (isFetching: boolean, userId: number): ToggleIsFollofingActionType => ({ type: TOGGLE_IS_FOLLOWING_PROGRESS, isFetching, userId })\n\ntype DispatchType = Dispatch<ActionsTypes>\ntype GetStateType = () => AppStateType\n\nexport const requestUsers = (page: number, pageSize: number) => {\n  return async (dispatch: DispatchType, getState: GetStateType ) => {\n    dispatch(toggleIsFetching(true))\n    dispatch(setCurrentPage(page))\n\n    const data = await usersAPI.getUsers(page, pageSize)\n    dispatch(toggleIsFetching(false))\n    dispatch(setUsers(data.items))\n    dispatch(setTotalUsersCount(data.totalCount))\n  }\n}\n\nexport const follow = (userId: number) => {\n  return async (dispatch: DispatchType, getState: GetStateType) => {\n    dispatch(toggleIsFollowing(true, userId))\n    const response = await usersAPI.follow(userId)\n    if (response.data.resultCode === 0) {\n      dispatch(followSuccess(userId))\n    }\n    dispatch(toggleIsFollowing(false, userId))\n  }\n}\n\nexport const unfollow = (userId: number) => {\n  return async (dispatch: DispatchType, getState: GetStateType) => {\n    dispatch(toggleIsFollowing(true, userId))\n    const response = await usersAPI.unfollow(userId)\n    if (response.data.resultCode === 0) {\n      dispatch(unfollowSuccess(userId))\n    }\n    dispatch(toggleIsFollowing(false, userId))\n  }\n}\n\nexport default usersReducer","import React, { useState } from 'react';\nimport styles from './Pagination.module.css'\nimport cn from 'classnames'\n\ntype PropsType = {\n    pageSize: number\n    totalItemsCount: number\n    currentPage: number\n    onPageChange: (pageNumber: number) => void\n    portionSize?: number\n}\n\nconst Pagination: React.FC<PropsType> = ({ pageSize, totalItemsCount,\n    currentPage, onPageChange, portionSize = 10 }) => {\n\n    let pagesCount = Math.ceil(totalItemsCount / pageSize)\n    let pages: Array<number> = [] \n    for (let i = 1; i <= pagesCount; i++) {\n        pages.push(i)\n    }\n\n    let portionCount = Math.ceil(pagesCount / portionSize);\n    let [portionNumber, setPortionNumber] = useState(1);\n    let leftPortionPageNumber = (portionNumber - 1) * (portionSize + 1);\n    let rightPortionPageNumber = portionNumber * portionSize;\n\n\n    return <div className={styles.paginator}>\n        {portionNumber > 1 &&\n            <button className={styles.portionButton} onClick={() => { setPortionNumber(portionNumber - 1) }}>PREV</button>}\n\n        {pages\n            .filter(p => p >= leftPortionPageNumber && p <= rightPortionPageNumber)\n            .map((p) => {\n                return <span className={cn({\n                    [styles.selectedPage]: currentPage === p\n                }, styles.pageNumber)}\n                    key={p}\n                    onClick={() => {\n                        onPageChange(p);\n                    }}>{p}</span>\n            })}\n        {portionCount > portionNumber &&\n            <button className={styles.portionButton} onClick={() => { setPortionNumber(portionNumber + 1) }}>NEXT</button>}\n\n\n    </div>\n}\n\nexport default Pagination;","import React from 'react';\nimport styles from './Users.module.css'\nimport userPhoto from '../../assets/mrrobot.png'\nimport { NavLink } from 'react-router-dom';\nimport Pagination from './Pagination';\nimport { UsersType } from '../../types/types';\n\ntype PropsType = {\n    pageSize: number\n    totalUsersCount: number\n    currentPage: number\n    onPageChange: (pageNumber: number) => void\n    users: Array<UsersType>\n    followingInProgress: Array<number>\n    follow: (userId: number) => void\n    unfollow: (userId: number) => void\n}\n\nconst Users: React.FC<PropsType> = ({ currentPage, onPageChange, totalUsersCount, pageSize, users, ...props }) => {\n\n    return (<div className={styles.usersPage}>\n        <Pagination\n            currentPage={currentPage}\n            onPageChange={onPageChange}\n            totalItemsCount={totalUsersCount}\n            pageSize={pageSize}\n        />\n        {users.map(u =>\n            <div className={styles.userInList} key={u.id}>\n                <span>\n                    <div className={styles.userName}>{u.name}</div>\n                    <span>\n                        <div>Country: </div>\n                        <div>City: </div>\n                        {/* <div>u.location.country</div>\n                        <div>u.location.city</div>  */}\n                    </span>\n                    <div >\n                        <NavLink to={`/profile/${u.id}`}>\n                            <img className={styles.userPic} alt={'small userpic'} src={u.photos.small != null ? u.photos.small : userPhoto} />\n                        </NavLink>\n                    </div>\n                    <div>\n                        {// @ts-ignore\n                            u.followed\n                            ? <button className={styles.unfollowButton} disabled={props.followingInProgress.some(id => id === u.id)} onClick={() => {\n                                props.unfollow(u.id)\n                            }}>unfollow</button>\n\n                            : <button className={styles.followButton} disabled={props.followingInProgress.some(id => id === u.id)} onClick={() => {\n                                props.follow(u.id)\n                            }}>follow <b>{u.name}</b></button>\n                        }\n                    </div>\n                </span>\n                <span>\n                    <span>\n                        <div>{u.status}</div>\n                    </span>\n                </span>\n            </div>)}\n    </div>\n    )\n\n}\n\nexport default Users;","import {createSelector} from 'reselect'\nimport {AppStateType} from \"./reduxStore\";\n\nconst getUsersSelector = (state: AppStateType) => {\n    return state.usersPage.users\n}\n\nexport const getUsers = createSelector(getUsersSelector, \n    (users) => {\n   // @ts-ignore\n        return users.filter(u => true)\n})\n\nexport const getPageSize = (state: AppStateType) => {\n    return state.usersPage.pageSize\n}\n\nexport const getTotalUsersCount = (state: AppStateType) => {\n    return state.usersPage.totalUsersCount\n}\n\nexport const getCurrentPage = (state: AppStateType) => {\n    return state.usersPage.currentPage\n}\n\nexport const getIsFetching = (state: AppStateType) => {\n    return state.usersPage.isFetching\n}\n\nexport const getFollowingInProgress = (state: AppStateType) => {\n    return state.usersPage.followingInProgress\n}\n\nexport const getFollow = (state: AppStateType) => {\n    return state.usersPage.follow\n}\n\nexport const getUnfollow = (state: AppStateType) => {\n    return state.usersPage.unfollow\n}\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { follow, unfollow, requestUsers, setCurrentPage } from '../../redux/usersReducer';\nimport Users from './Users';\nimport Preloader from '../common/Preloader/Preloader'\n\nimport { compose } from 'redux';\nimport { getUsers, getPageSize, getTotalUsersCount, getCurrentPage, getIsFetching, getFollowingInProgress } from '../../redux/userSelectors';\nimport { UsersType } from '../../types/types';\nimport { AppStateType } from '../../redux/reduxStore';\n\ntype MapStatePropsType = {\n    currentPage: number\n    pageSize: number\n    isFetching: boolean\n    users: Array<UsersType>\n    totalUsersCount: number\n    followingInProgress: Array<number>\n}\n\ntype MapDispatchPropsType = {\n    follow: (userId: number) => void\n    unfollow: (userId: number) => void\n    getUsers: (page: number, pageSize: number) => void\n    setCurrentPage: (currentPage: number) => void\n}\n\ntype OwnPropsType = {\n    pageTitle: string\n}\n\ntype PropsType = MapStatePropsType & MapDispatchPropsType & OwnPropsType\n\nclass UsersContainer extends React.Component<PropsType> {\n\n    componentDidMount() {\n        const { currentPage, pageSize } = this.props\n        this.props.getUsers(currentPage, pageSize)\n    }\n\n    onPageChange = (pageNumber: number) => {\n        const { pageSize } = this.props\n        this.props.getUsers(pageNumber, pageSize)\n    }\n\n    render() {\n        return <>\n            <h2>{this.props.pageTitle}</h2>\n            {this.props.isFetching ? <Preloader /> : null}\n            <Users\n                currentPage={this.props.currentPage}\n                onPageChange={this.onPageChange}\n                users={this.props.users}\n                follow={this.props.follow}\n                unfollow={this.props.unfollow}\n                followingInProgress={this.props.followingInProgress}\n                // @ts-ignore\n                isAuth={this.props.isAuth}\n                totalUsersCount={this.props.totalUsersCount}\n                pageSize={this.props.pageSize}\n\n            />\n        </>\n    }\n}\n\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => {\n    return {\n        users: getUsers(state),\n        pageSize: getPageSize(state),\n        totalUsersCount: getTotalUsersCount(state),\n        currentPage: getCurrentPage(state),\n        isFetching: getIsFetching(state),\n        followingInProgress: getFollowingInProgress(state)\n    }\n}\n\nexport default compose( //   <TStateProps = {}, TDispatchProps = {}, TOwnProps = {}, State = DefaultRootState>\n    connect<MapStatePropsType, MapDispatchPropsType, OwnPropsType, AppStateType>(mapStateToProps,\n        { follow, unfollow, setCurrentPage, getUsers: requestUsers  })\n)(UsersContainer)\n\n// let mapDispatchToProps = (dispatch) => {\n\n//     return {\n//         follow: (userId) => {\n//             dispatch(followAC(userId));\n//         },\n//         unfollow: (userId) => {\n//             dispatch(unfollowAC(userId));\n//         },\n//         setUsers: (users) => {\n//             dispatch(setUsersAC(users));\n//         },\n//         setCurrentPage: (currentPage) => {\n//             dispatch(setCurrentPageAC(currentPage))\n//         },\n//         setTotalUsersCount: (totalCount) => {\n//             dispatch(setTotalUsersCountAC(totalCount))\n//         },\n//         toggleIsFetching: (isFetching) => {\n//             dispatch(toggleIsFetchingAC(isFetching))\n//         }\n//     }\n","import React from 'react';\nimport styles from './Header.module.css';\nimport { NavLink, Redirect } from 'react-router-dom';\nimport logo from '../../assets/eye.png'\n\nfunction Header(props) {\n    return (\n        <header className={styles.header}>\n            <img src={logo} alt={'logo'} />\n            <div className={styles.login}>\n                {props.isAuth\n                    ? <div> {props.login} <button className={styles.logoutButton}\n                        onClick={props.logout}>Logout</button></div>\n                    : <NavLink to={'/login'}>\n                        L O G I N\n                        <Redirect to={'/login'} />\n                    </NavLink>}\n            </div>\n\n        </header>\n    );\n}\n\nexport default Header;","import {authAPI, ResultCodesEnum, securityAPI} from '../api/api'\nimport {stopSubmit} from 'redux-form';\n\nconst SET_USER_DATA = 'auth/SET_USER_DATA';\nconst GET_CAPTCHA_URL_SUCCESS = 'auth/GET_CAPTCHA_URL_SUCCESS';\n\nlet initialState = {\n  id: null as number | null,\n  login: null as string | null,\n  email: null as string | null,\n  isAuth: false,\n  captchaUrl: null as string | null // if null captcha is not required\n}\n\ntype InitialStateType = typeof initialState\n\nconst authReducer = (state = initialState, action: any): InitialStateType => {\n\n  switch (action.type) {\n    case SET_USER_DATA:\n    case GET_CAPTCHA_URL_SUCCESS:\n      return {\n        ...state,\n        ...action.payload\n      }\n    default:\n      return state\n  }\n}\n\ntype SetAuthUserDataActionPayloadType = {\n  id: number | null\n  login: string | null\n  email: string | null\n  isAuth: boolean\n}\ntype SetAuthUserDataActionType = {\n  type: typeof SET_USER_DATA\n  payload: SetAuthUserDataActionPayloadType\n}\n\nexport const setAuthUserData = (id: number | null, login: string | null, email: string | null, isAuth: boolean): SetAuthUserDataActionType => ({\n  type: SET_USER_DATA, payload: { id, login, email, isAuth }\n})\n\ntype GetCaptchaUrlSuccessActionType = {\n  type: typeof GET_CAPTCHA_URL_SUCCESS\n  payload: { captchaUrl: string }\n}\n\nexport const getCaptchaUrlSuccess = (captchaUrl: string): GetCaptchaUrlSuccessActionType => ({\n  type: GET_CAPTCHA_URL_SUCCESS, payload: { captchaUrl }\n})\n\n\nexport const getAuthUserData = () => async (dispatch: any) => {\n  const meData = await authAPI.me()\n  const { id, login, email } = meData.data\n  if (meData.resultCode === ResultCodesEnum.Success) {\n    dispatch(setAuthUserData(id, login, email, true))\n  }\n}\n\nexport const login = (email: string, password: string, rememberMe: boolean, captcha: string) => async (dispatch: any) => {\n  const loginData = await authAPI.login(email, password, rememberMe, captcha)\n  if (loginData.resultCode === ResultCodesEnum.Success) {\n    // success get auth data\n    dispatch(getAuthUserData())\n  } else {\n    if (loginData.resultCode === ResultCodesEnum.CaptchaIsRequired) {\n      dispatch(getCaptchaUrl())\n    }\n    let messaage = loginData.messages.length > 0 ? loginData.messages[0] : 'Some error!'\n    dispatch(stopSubmit('login', { _error: messaage }))\n  }\n}\n\nexport const logout = () => async (dispatch: any) => {\n  const response = await authAPI.logout()\n  if (response.data.resultCode === ResultCodesEnum.Success) {\n    dispatch(setAuthUserData(null, null, null, false))\n  }\n}\n\nexport const getCaptchaUrl = () => async (dispatch: any) => {\n  const response = await securityAPI.getCaptchaUrl()\n  const captchaUrl = response.data.url\n  dispatch(getCaptchaUrlSuccess(captchaUrl))\n}\n\nexport default authReducer","import React from 'react';\nimport Header from './Header';\nimport { connect } from 'react-redux';\nimport { logout } from '../../redux/authReducer';\n\nclass HeaderComponent extends React.Component {\n    render() {\n        return (\n            <Header {...this.props} />\n        );\n    }\n}\n\nlet mapStateToProps = (state) => ({\n    isAuth: state.auth.isAuth,\n    login: state.auth.login\n})\n\nexport default connect(mapStateToProps, { logout })(HeaderComponent);","import React from 'react';\nimport { Field, reduxForm } from 'redux-form'\nimport { Input } from '../common/FormsControls/FormsControls';\nimport { required } from '../../validators/validators';\nimport { connect } from 'react-redux';\nimport { login } from '../../redux/authReducer';\nimport { Redirect } from 'react-router-dom';\nimport styles from '../common/FormsControls/FormsControls.module.css'\nimport loginStyles from './Login.module.css'\n\nconst LoginForm = ({ handleSubmit, error, captchaUrl }) => {\n    return (\n        <form onSubmit={handleSubmit}>\n            <div>\n                <Field placeholder={'Email'} name={'email'} component={Input} validate={[required]} />\n            </div>\n            <div>\n                <Field placeholder={'Password'} name={'password'} component={Input} validate={[required]} type={'password'} />\n            </div>\n            <div>\n            Remember me <Field type={'checkbox'} name={'rememberMe'} component={Input} /> \n            </div>\n            {captchaUrl && <img src={captchaUrl} alt={'captcha'} />}\n\n            {captchaUrl && <Field placeholder={'Enter the symbols from image'} name={'captcha'}\n                component={Input} validate={[required]} />}\n            {error && <div className={styles.formSummaryError}>\n                {error}\n            </div>}\n            <div>\n                <button className={styles.loginButton}>Login</button>\n            </div>\n        </form>\n    )\n}\n\nconst LoginReduxForm = reduxForm({ form: 'login' })(LoginForm)\n\nconst Login = (props) => {\n    const onSubmit = (formData) => {\n        props.login(formData.email, formData.password, formData.rememberMe, formData.captcha)\n    }\n\n    if (props.isAuth) {\n        return <Redirect to={'/profile'} />\n    }\n\n    return <div className={loginStyles.loginPage}>\n        <h1>Login page</h1>\n        <p>Please enter your login and password</p>\n        <LoginReduxForm onSubmit={onSubmit} captchaUrl={props.captchaUrl} />\n    </div>\n}\n\nconst mapStateToProps = (state) => ({\n    isAuth: state.auth.isAuth,\n    captchaUrl: state.auth.captchaUrl\n})\n\nexport default connect(mapStateToProps, { login })(Login)","import { getAuthUserData } from \"./authReducer\";\n\n\nconst INITIALIZED_SUCCESS = 'app/INITIALIZED_SUCCESS';\n\ntype InitialStateType = {\n  initialized: boolean\n}\n\nlet initialState: InitialStateType = {\n  initialized: false\n}\n\nconst appReducer = (state = initialState, action: any): InitialStateType => {\n\n  switch (action.type) {\n    case INITIALIZED_SUCCESS:\n      return {\n        ...state,\n        initialized: true\n      }\n    default:\n      return state\n  }\n}\n\nexport const initializedSuccess = (): InitializedSuccessActionType  => ({ type: INITIALIZED_SUCCESS })\n\ntype InitializedSuccessActionType = {\n  type: typeof INITIALIZED_SUCCESS\n}\n\nexport const initializeApp = () => (dispatch: any) => {\n  let promise = dispatch(getAuthUserData())\n  promise.then(() => {\n    dispatch(initializedSuccess())\n  })\n}\n\nexport default appReducer\n","import React from 'react';\nimport styles from './Footer.module.css';\n\nconst Footer = (props) => {\n    return (\n        <div className={styles.footer}>\n            :\\\n        </div>\n    );\n}\n\nexport default Footer;","import React from 'react';\nimport styles from './Sidebar.module.css';\n\n\nconst Sidebar = () => {\n  return (\n   <div className={styles.sidebar}></div>\n  )\n}\n\nexport default Sidebar;","import React, { Suspense } from 'react';\nimport './App.css';\nimport Nav from './components/Nav/Nav';\nimport Photos from './components/Photos/Photos';\nimport Music from './components/Music/Music';\nimport Settings from './components/Settings/Settings';\nimport { HashRouter, Route, Switch, Redirect } from 'react-router-dom';\n//import DialogsContainer from './components/Dialogs/DialogsContainer';\nimport UsersContainer from './components/Users/UsersContainer';\n//import ProfileContainer from './components/Profile/ProfileContainer';\nimport HeaderComponent from './components/Header/HeaderComponent';\nimport Login from './components/Login/Login';\nimport { connect } from 'react-redux';\nimport { initializeApp } from './redux/appReducer';\nimport Preloader from './components/common/Preloader/Preloader';\nimport Footer from './components/Footer/Footer';\nimport Sidebar from './components/Sidebar/Sideber';\n\nconst DialogsContainer = React.lazy(() => import('./components/Dialogs/DialogsContainer'))\nconst ProfileContainer = React.lazy(() => import('./components/Profile/ProfileContainer'))\n\nclass App extends React.Component {\n\n  componentDidMount() {\n    this.props.initializeApp()\n  }\n\n  componentWillUnmount() {\n  }\n  render() {\n    if (!this.props.initialized) {\n      return <Preloader />\n    }\n    // HashRouter used for gh pages. Please use BrouserRouter\n    return (\n      <HashRouter>\n        <div className='app-wrapper'>\n          <HeaderComponent />\n          <Nav />\n          <div className='app-wrapper-content'>\n            <Switch>\n              <Route exact path='/'\n                render={() => <Suspense fallback={<div>Загрузка...</div>}>\n                  <Redirect to={'/profile'} />\n                </Suspense>}\n              />\n              <Route\n                path='/dialogs'\n                render={() => <Suspense fallback={<div>Загрузка...</div>}>\n                  <DialogsContainer />\n                </Suspense>}\n              />\n              <Route path='/profile/:userId?'\n                render={() => <Suspense fallback={<div>Загрузка...</div>}>\n                  <ProfileContainer />\n                </Suspense>}\n              />\n              <Route path='/users'\n                render={() => <UsersContainer pageTitle={'All users'}\n                />}\n              />\n              <Route path='/login'\n                render={() => <Login\n                />}\n              />\n              <Route path='/photos' component={Photos} />\n              <Route path='/music' component={Music} />\n              <Route path='/settings' component={Settings} />\n              <Route path='*'\n                render={() => <div>404 NOT FOUND</div>}\n              />\n            </Switch>\n          </div>\n          <Sidebar/>\n          <Footer/>\n        </div>\n      </HashRouter>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  initialized: state.app.initialized\n})\n\nexport default connect(mapStateToProps, { initializeApp })(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import profileReducer from './profileReducer'\nimport dialogsReducer from './dialogsReducer'\nimport usersReducer from './usersReducer'\nimport authReducer from './authReducer'\nimport appReducer from './appReducer'\nimport { reducer as formReducer } from 'redux-form'\n\nimport thunkMiddleware from 'redux-thunk'\n\nconst { createStore, combineReducers, applyMiddleware, compose } = require(\"redux\")\n\nlet rootReducer = combineReducers({\n    profilePage: profileReducer,\n    dialogsPage: dialogsReducer,\n    usersPage: usersReducer,\n    auth: authReducer,\n    form: formReducer,\n    app: appReducer\n})\n\ntype RootReducerType = typeof rootReducer // (global state: AppStateType) => AppStateType\nexport type AppStateType = ReturnType<RootReducerType>\n\n// @ts-ignore\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\n\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunkMiddleware)))\n// @ts-ignore\nwindow._store_ = store\n\nexport default store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './redux/reduxStore';\nimport { Provider } from 'react-redux';\n\n\n  ReactDOM.render(\n\n    <React.StrictMode>\n      <Provider store={store}>\n        <App />\n      </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n  );\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"usersPage\":\"Users_usersPage__3xdAn\",\"userPic\":\"Users_userPic__1_BqH\",\"selectedPage\":\"Users_selectedPage__J63sh\",\"userInList\":\"Users_userInList__OVJXd\",\"userName\":\"Users_userName__1mt5V\",\"unfollowButton\":\"Users_unfollowButton__3QsTy\",\"followButton\":\"Users_followButton__2xwHU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__3oI2W\",\"formSummaryError\":\"FormsControls_formSummaryError__1F2-S\",\"saveButton\":\"FormsControls_saveButton__3VGCw\",\"loginButton\":\"FormsControls_loginButton__3wK0r\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"paginator\":\"Pagination_paginator__1TXwA\",\"pageNumber\":\"Pagination_pageNumber__1r7yr\",\"selectedPage\":\"Pagination_selectedPage__zdDHb\",\"portionButton\":\"Pagination_portionButton__12LKm\"};","import React from 'react'\nimport styles from './FormsControls.module.css'\n\nexport const Textarea = ({ input, meta: { touched, error }, ...props }) => {\n    const hasError = touched && error\n\n    return (\n        <div className={(hasError ? styles.formControl : '')}>\n            <textarea {...input} {...props} />\n            <div>\n                {hasError && <span>{error}</span>}\n            </div>\n        </div>\n    )\n}\n\nexport const Input = ({ input, meta: { touched, error }, ...props }) => {\n    const hasError = touched && error\n\n    return (\n        <div className={(hasError ? styles.formControl : '')}>\n            <input {...input} {...props} />\n            <div>\n                {hasError && <span>{error}</span>}\n            </div>\n        </div>\n    )\n}","import React from 'react'\nimport preloader from '../../../assets/preloader.gif';\n\nlet Preloader = () => {\n    return (\n        <img src={preloader} alt={'preloader'} />\n    )\n\n    \n}\n\nexport default Preloader","export const required = (value) => {\n    if (value) return undefined\n    return 'Required field'\n}\n\nexport const maxLengthCreator = (maxLength) => (value) => {\n    if (value.length > maxLength) return `max length is ${maxLength} symbols`\n    return undefined\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__1VCKf\",\"login\":\"Header_login__3V3Qa\",\"logoutButton\":\"Header_logoutButton__21mWM\"};","import { PhotosType, ContactsType } from './../types/types';\nimport { profileAPI } from '../api/api';\nimport { stopSubmit } from 'redux-form';\n\nconst ADD_POST = 'profile/ADD-POST';\nconst SET_USER_PROFILE = 'profile/SET_USER_PROFILE';\nconst SET_STATUS = 'profile/SET_STATUS';\nconst DELETE_POST = 'profile/DELETE_POST';\nconst SAVE_PHOTO_SUCCESS = 'profile/SAVE_PHOTO_SUCCESS';\n\ntype PostsType = {\n  id: number\n  post: string\n  likesCount: number\n}\n\nexport type ProfileType = {\n  userId: number\n  lookingForAJob: boolean\n  lookingForAJobDescription: string\n  fullName: string\n  contacts: ContactsType\n  photos: PhotosType\n}\n\nlet initialState = {\n  posts: [\n    { id: 1, post: 'Hey you there!', likesCount: 4 },\n    { id: 2, post: 'Bro.. nice 2 meet u', likesCount: 46 },\n    { id: 3, post: ':O:O:O:O', likesCount: 12 }\n  ] as Array<PostsType>,\n  profile: null as ProfileType | null,\n  status: ''\n}\n\nexport type InitialStateType = typeof initialState\n\nconst profileReducer = (state = initialState, action: any): InitialStateType => {\n\n  switch (action.type) {\n    case ADD_POST:\n      return {\n        ...state,\n        posts: [...state.posts, { id: 4, post: action.newPostText, likesCount: 0 }]\n      }\n    case SET_STATUS:\n      return {\n        ...state,\n        status: action.status\n      }\n    case SET_USER_PROFILE:\n      return {\n        ...state, profile: action.profile\n      }\n    case DELETE_POST:\n      return {\n        ...state, posts: state.posts.filter(p => p.id !== action.id)\n      }\n    case SAVE_PHOTO_SUCCESS:\n      return {\n        ...state, profile: { ...state.profile, photos: action.photos } as ProfileType\n      }\n    default:\n      return state\n  }\n}\n\nexport const getUserProfile = (userId: number) => {\n  return async (dispatch: any) => {\n    const response = await profileAPI.getProfile(userId)\n    dispatch(setUserProfile(response.data))\n  }\n}\n\nexport const getStatus = (userId: number) => {\n  return async (dispatch: any) => {\n    const response = await profileAPI.getStatus(userId)\n    dispatch(setStatus(response.data))\n  }\n}\n\nexport const updateStatus = (status: string) => {\n  return async (dispatch: any) => {\n    try {\n      const response = await profileAPI.updateStatus(status)\n      if (response.data.resultCode === 0) {\n        dispatch(setStatus(status))\n      }\n    } catch (error) {\n      debugger\n      alert(error) //here will be error handler\n    }\n  }\n}\n\nexport const savePhoto = (file: any) => async (dispatch: any) => {\n  const response = await profileAPI.savePhoto(file);\n  if (response.data.resultCode === 0) {\n    dispatch(savePhotoSuccess(response.data.data.photos));\n  }\n}\n\nexport const saveProfile = (profile: ProfileType) => async (dispatch: any, getState: any) => {\n  const userId = getState().auth.id\n  let response = await profileAPI.saveProfile(profile);\n  if (response.data.resultCode === 0) {\n    dispatch(getUserProfile(userId));\n  } else {\n    let key = response.data.messages[0].match(/Contacts->(\\w+)/)[1].toLowerCase();\n    dispatch(stopSubmit('editProfile', {\n      contacts: { [key]: response.data.messages[0] },\n    }))\n    return Promise.reject(response.data.messages[0])\n  }\n  //4 show general error {_error: response.data.messages[0] }\n\n}\ntype AddNewPostActionCreatorType = {\n  type: typeof ADD_POST\n  newPostText: string\n}\n\nexport const addNewPostActionCreator = (newPostText: string): AddNewPostActionCreatorType => ({ type: ADD_POST, newPostText })\n\ntype SetUserProfileActionType =\n  {\n    type: typeof SET_USER_PROFILE\n    profile: ProfileType\n  }\n\nexport const setUserProfile = (profile: ProfileType): SetUserProfileActionType => ({ type: SET_USER_PROFILE, profile })\n\ntype SetStatusActionType = {\n  type: typeof SET_STATUS\n  status: string \n}\n\nexport const setStatus = (status: string): SetStatusActionType => ({ type: SET_STATUS, status })\n\ntype DeletePostActionType = {\n  type: typeof DELETE_POST\n  id: number\n}\n\nexport const deletePost = (id: number): DeletePostActionType => ({ type: DELETE_POST, id })\n\ntype SavePhotoSuccessActionType = {\n  type: typeof SAVE_PHOTO_SUCCESS\n  photos: PhotosType \n}\n\nexport const savePhotoSuccess = (photos: PhotosType): SavePhotoSuccessActionType => ({ type: SAVE_PHOTO_SUCCESS, photos })\n\nexport default profileReducer"],"sourceRoot":""}