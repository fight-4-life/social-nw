{"version":3,"sources":["components/Header/Header.module.css","api/profileApi.ts","redux/profileReducer.ts","assets/mrrobot.png","redux/dialogsReducer.ts","api/api.ts","assets/eye.png","components/Login/Login.module.css","components/Footer/Footer.module.css","components/Sidebar/Sidebar.module.css","components/Nav/Nav.module.css","components/Nav/Nav.tsx","components/Photos/Photos.tsx","components/Music/Music.tsx","components/Settings/Settings.tsx","redux/userSelectors.ts","components/Users/Pagination.tsx","api/usersApi.ts","redux/usersReducer.ts","components/Users/UsersSearchForm.tsx","components/Users/Users.tsx","components/Users/UsersContainer.tsx","components/Header/Header.tsx","api/authApi.ts","api/securityApi.ts","redux/authReducer.ts","components/Header/HeaderComponent.tsx","components/Login/Login.tsx","redux/appReducer.ts","components/common/Time/Time.tsx","components/Footer/Footer.tsx","components/Sidebar/Sideber.tsx","components/common/404/page404.tsx","App.tsx","serviceWorker.js","redux/reduxStore.ts","index.tsx","components/common/FormsControls/FormsControls.module.css","components/Users/Pagination.module.css","components/common/FormsControls/FormsControls.tsx","components/Users/Users.module.css","components/common/Preloader/Preloader.tsx","validators/validators.ts"],"names":["module","exports","profileAPI","userId","instance","get","then","res","data","status","put","photoFile","formData","FormData","append","profile","ADD_POST","actions","addNewPostActionCreator","newPostText","type","setUserProfile","setStatus","deletePost","id","savePhotoSuccess","photos","initialState","posts","post","likesCount","getUserProfile","dispatch","a","response","getStatus","updateStatus","resultCode","alert","savePhoto","file","saveProfile","getState","auth","stopSubmit","_error","messages","Promise","reject","profileReducer","state","action","filter","p","dialogs","name","message","sendMessageActionCreator","newMessageText","dialogsReducer","messageText","ResultCodeEnum","axios","create","withCredentials","baseURL","headers","Nav","className","styles","nav","item","activeClassName","activeLink","to","Photos","Music","Settings","getUsers","createSelector","usersPage","users","u","getPageSize","pageSize","getTotalUsersCount","totalUsersCount","getCurrentPage","currentPage","getIsFetching","isFetching","getFollowingInProgress","followingInProgress","getUsersFilter","Pagination","totalItemsCount","onPageChange","portionSize","pagesCount","Math","ceil","pages","i","push","portionCount","useState","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","paginator","portionButton","onClick","map","cn","selectedPage","pageNumber","key","usersApi","term","friend","delete","FOLLOW","payload","requestUsers","page","items","totalCount","usersReducer","followed","usersSearchFormValidate","values","UsersSearchForm","React","memo","props","useSelector","enableReinitialize","initialValues","validate","onSubmit","setSubmitting","onFilterChanged","isSubmitting","as","value","disabled","Users","useDispatch","history","useHistory","useEffect","parsed","queryString","location","search","substr","actualPage","actualFilter","Number","query","String","pathname","followUser","follow","unfollowUser","unfollow","userInList","userName","userPic","alt","src","small","userPhoto","size","danger","some","UsersContainer","pageTitle","Preloader","Header","header","logo","login","isAuth","logoutButton","logout","authAPI","email","password","rememberMe","captcha","securityAPI","captchaUrl","getAuthUserData","meData","Success","getCaptchaUrl","url","authReducer","HeaderComponent","this","Component","connect","LoginReduxForm","reduxForm","form","handleSubmit","error","Field","placeholder","component","Input","required","formSummaryError","loginButton","Login","loginStyles","loginPage","loginData","CaptchaIsRequired","messaage","length","initialized","appReducer","Time","Date","toLocaleString","theTime","setTheTime","interval","setInterval","clearInterval","Footer","footer","Sidebar","sidebar","page404","title","subTitle","extra","href","DialogsContainer","lazy","ProfileContainer","ChatPage","App","initializeApp","exact","path","render","fallback","app","Boolean","window","hostname","match","require","createStore","combineReducers","applyMiddleware","compose","store","profilePage","dialogsPage","formReducer","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","thunkMiddleware","_store_","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","Textarea","input","meta","touched","hasError","formControl","maxLengthCreator","maxLength"],"mappings":"iGACAA,EAAOC,QAAU,CAAC,OAAS,uBAAuB,MAAQ,sBAAsB,aAAe,+B,ySCMlFC,EAAa,SACXC,GACP,OAAOC,IAASC,IAAT,kBAAqCF,IAAUG,MAAK,SAAAC,GAAG,OAAIA,EAAIC,SAFjEN,EAAa,SAIZC,GACN,OAAOC,IAASC,IAAT,yBAAuCF,IAAUG,MAAK,SAAAC,GAAG,OAAIA,EAAIC,SALnEN,EAAa,SAOTO,GACT,OAAOL,IAASM,IAAT,iBAAgD,CAACD,WAASH,MAAK,SAAAC,GAAG,OAAIA,EAAIC,SAR5EN,EAAa,SAUZS,GACN,IAAMC,EAAW,IAAIC,SAErB,OADAD,EAASE,OAAO,QAASH,GAClBP,IAASM,IAAoC,gBAAiBE,GAAUN,MAAK,SAAAC,GAAG,OAAIA,EAAIC,SAb1FN,EAAa,SAeVa,GACR,OAAOX,IAASM,IAAT,UAAyCK,GAAST,MAAK,SAAAC,GAAG,OAAIA,EAAIC,SClB3EQ,EAAW,mBAMJC,EAAU,CACrBC,wBAAyB,SAACC,GAAD,MAA0B,CAAEC,KAAMJ,EAAUG,gBACrEE,eAAgB,SAACN,GAAD,MAA2B,CAAEK,KAPtB,2BAO8CL,YACrEO,UAAW,SAACb,GAAD,MAAqB,CAAEW,KAPjB,qBAOmCX,WACpDc,WAAY,SAACC,GAAD,MAAiB,CAAEJ,KAPb,sBAOgCI,OAClDC,iBAAkB,SAACC,GAAD,MAAyB,CAAEN,KAPpB,6BAO8CM,YAYnEC,EAAe,CACnBC,MAAO,CACL,CAAEJ,GAAI,EAAGK,KAAM,iBAAkBC,WAAY,GAC7C,CAAEN,GAAI,EAAGK,KAAM,sBAAuBC,WAAY,IAClD,CAAEN,GAAI,EAAGK,KAAM,WAAYC,WAAY,KAEzCf,QAAS,KACTN,OAAQ,IAkCGsB,EAAiB,SAAC5B,GAC7B,8CAAO,WAAO6B,GAAP,eAAAC,EAAA,sEACkB/B,EAAsBC,GADxC,OACC+B,EADD,OAELF,EAASf,EAAQI,eAAea,IAF3B,2CAAP,uDAMWC,EAAY,SAAChC,GACxB,8CAAO,WAAO6B,GAAP,eAAAC,EAAA,sEACkB/B,EAAqBC,GADvC,OACC+B,EADD,OAELF,EAASf,EAAQK,UAAUY,IAFtB,2CAAP,uDAMWE,EAAe,SAAC3B,GAC3B,8CAAO,WAAOuB,GAAP,SAAAC,EAAA,+EAEoB/B,EAAwBO,GAF5C,OAGyB,IAHzB,OAGU4B,YACXL,EAASf,EAAQK,UAAUb,IAJ1B,gDAOH6B,MAAM,EAAD,IAPF,yDAAP,uDAYWC,EAAY,SAACC,GAAD,8CAA0B,WAAOR,GAAP,eAAAC,EAAA,sEAC1B/B,EAAqBsC,GADK,OAErB,KADtBN,EAD2C,QAEpCG,YACXL,EAASf,EAAQQ,iBAAiBS,EAAS1B,KAAKkB,SAHD,2CAA1B,uDAOZe,EAAc,SAAC1B,GAAD,8CAAqC,WAAOiB,EAAUU,GAAjB,iBAAAT,EAAA,6DACxD9B,EAASuC,IAAWC,KAAKnB,GAD+B,SAEvCtB,EAAuBa,GAFgB,UAGlC,KADtBmB,EAFwD,QAGjDG,WAHiD,gBAI5DL,EAASD,EAAe5B,IAJoC,8BAO5D6B,EAASY,YAAW,cAAe,CACjCC,OAAQX,EAASY,SAAS,MARgC,kBAWrDC,QAAQC,OAAOd,EAASY,SAAS,KAXoB,4CAArC,yDAiBZG,IAhFQ,WAA0D,IAAzDC,EAAwD,uDAAhDvB,EAAcwB,EAAkC,uCAC9E,OAAQA,EAAO/B,MACb,KAAKJ,EACH,OAAO,2BACFkC,GADL,IAEEtB,MAAM,GAAD,mBAAMsB,EAAMtB,OAAZ,CAAmB,CAAEJ,GAAI,EAAGK,KAAMsB,EAAOhC,YAAaW,WAAY,OAE3E,IAxCe,qBAyCb,OAAO,2BACFoB,GADL,IAEEzC,OAAQ0C,EAAO1C,SAEnB,IA9CqB,2BA+CnB,OAAO,2BACFyC,GADL,IACYnC,QAASoC,EAAOpC,UAE9B,IAhDgB,sBAiDd,OAAO,2BACFmC,GADL,IACYtB,MAAOsB,EAAMtB,MAAMwB,QAAO,SAAAC,GAAC,OAAIA,EAAE7B,KAAO2B,EAAO3B,QAE7D,IAnDuB,6BAoDrB,OAAO,2BACF0B,GADL,IACYnC,QAAQ,2BAAMmC,EAAMnC,SAAb,IAAsBW,OAAQyB,EAAOzB,WAE1D,QACE,OAAOwB,K,oBCjEblD,EAAOC,QAAU,IAA0B,qC,sFCcrC0B,EAAe,CACnB2B,QAAS,CACP,CAAE9B,GAAI,EAAG+B,KAAM,SACf,CAAE/B,GAAI,EAAG+B,KAAM,QACf,CAAE/B,GAAI,EAAG+B,KAAM,UACf,CAAE/B,GAAI,EAAG+B,KAAM,QACf,CAAE/B,GAAI,EAAG+B,KAAM,QACf,CAAE/B,GAAI,EAAG+B,KAAM,UAEjBT,SAAU,CACR,CAAEtB,GAAI,EAAGgC,QAAS,SAClB,CAAEhC,GAAI,EAAGgC,QAAS,kCAClB,CAAEhC,GAAI,EAAGgC,QAAS,cAClB,CAAEhC,GAAI,EAAGgC,QAAS,gBAOTvC,EAAU,CACrBwC,yBAA0B,SAACC,GAAD,MAA6B,CAAEtC,KAjCvC,sBAiC0DsC,oBAiB/DC,IAbQ,WAAmE,IAAlET,EAAiE,uDAAzDvB,EAAcwB,EAA2C,uCACvF,OAAQA,EAAO/B,MACb,IAvCgB,sBAwCd,IAAIwC,EAAcT,EAAOO,eACzB,OAAO,2BACFR,GADL,IAEEJ,SAAS,GAAD,mBAAMI,EAAMJ,UAAZ,CAAsB,CAAEtB,GAAI,EAAGgC,QAASI,OAEpD,QACE,OAAOV,K,gCChDb,wEAeYW,EAfZ,SAGazD,EAHb,OAGwB0D,EAAMC,OAAO,CACjCC,iBAAiB,EACjBC,QAAS,gDACTC,QAAS,CAAE,UAAW,2C,SASdL,O,qBAAAA,I,iBAAAA,I,2CAAAA,M,0BCfZ7D,EAAOC,QAAU,IAA0B,iC,oBCC3CD,EAAOC,QAAU,CAAC,UAAY,2B,oBCA9BD,EAAOC,QAAU,CAAC,OAAS,yB,oBCA3BD,EAAOC,QAAU,CAAC,QAAU,2B,yDCA5BD,EAAOC,QAAU,CAAC,IAAM,iBAAiB,KAAO,kBAAkB,WAAa,0B,mMCiChEkE,EA9BO,WAClB,OACI,yBAAKC,UAAWC,IAAOC,KACnB,4BACI,wBAAIF,UAAWC,IAAOE,MAClB,kBAAC,IAAD,CAASC,gBAAiBH,IAAOI,WAAYC,GAAG,YAAhD,YAEJ,wBAAIN,UAAWC,IAAOE,MAClB,kBAAC,IAAD,CAASC,gBAAiBH,IAAOI,WAAYC,GAAG,YAAhD,aAEJ,wBAAIN,UAAWC,IAAOE,MAClB,kBAAC,IAAD,CAASC,gBAAiBH,IAAOI,WAAYC,GAAG,UAAhD,UAEJ,wBAAIN,UAAWC,IAAOE,MAClB,kBAAC,IAAD,CAASC,gBAAiBH,IAAOI,WAAYC,GAAG,SAAhD,SAEJ,wBAAIN,UAAWC,IAAOE,MAClB,kBAAC,IAAD,CAASC,gBAAiBH,IAAOI,WAAYC,GAAG,WAAhD,WAEJ,wBAAIN,UAAWC,IAAOE,MAClB,kBAAC,IAAD,CAASC,gBAAiBH,IAAOI,WAAYC,GAAG,UAAhD,UAEJ,wBAAIN,UAAWC,IAAOE,MAClB,kBAAC,IAAD,CAASC,gBAAiBH,IAAOI,WAAYC,GAAG,aAAhD,gBCjBLC,EARU,WACvB,OACE,wCCMWC,EARS,WACtB,OACE,uCCMWC,EARY,WACzB,OACE,0C,wBCGSC,EAAWC,aAJC,SAAC7B,GACtB,OAAOA,EAAM8B,UAAUC,SAIvB,SAACA,GAEG,OAAOA,EAAM7B,QAAO,SAAA8B,GAAC,OAAI,QAGpBC,EAAc,SAACjC,GACxB,OAAOA,EAAM8B,UAAUI,UAGdC,EAAqB,SAACnC,GAC/B,OAAOA,EAAM8B,UAAUM,iBAGdC,EAAiB,SAACrC,GAC3B,OAAOA,EAAM8B,UAAUQ,aAGdC,EAAgB,SAACvC,GAC1B,OAAOA,EAAM8B,UAAUU,YAGdC,EAAyB,SAACzC,GACnC,OAAOA,EAAM8B,UAAUY,qBAWdC,EAAiB,SAAC3C,GAC3B,OAAOA,EAAM8B,UAAU5B,Q,kDCOZ0C,EArCyB,SAAC,GAKrC,IAJmD,IADZV,EACW,EADXA,SAAUW,EACC,EADDA,gBACjDP,EAAkD,EAAlDA,YAAaQ,EAAqC,EAArCA,aAAqC,IAAvBC,mBAAuB,MAAT,GAAS,EAE9CC,EAAaC,KAAKC,KAAKL,EAAkBX,GACzCiB,EAAuB,GAClBC,EAAI,EAAGA,GAAKJ,EAAYI,IAC7BD,EAAME,KAAKD,GAGf,IAAIE,EAAeL,KAAKC,KAAKF,EAAaD,GARQ,EASVQ,mBAAS,GATC,mBAS7CC,EAT6C,KAS9BC,EAT8B,KAU9CC,GAAyBF,EAAgB,IAAMT,EAAc,GAC7DY,EAAyBH,EAAgBT,EAG7C,OAAO,yBAAK7B,UAAWC,IAAOyC,WACzBJ,EAAgB,GACb,4BAAQtC,UAAWC,IAAO0C,cAAeC,QAAS,WAAQL,EAAiBD,EAAgB,KAA3F,QAEHL,EACIjD,QAAO,SAAAC,GAAC,OAAIA,GAAKuD,GAAyBvD,GAAKwD,KAC/CI,KAAI,SAAC5D,GACF,OAAO,0BAAMe,UAAW8C,IAAG,eACtB7C,IAAO8C,aAAe3B,IAAgBnC,GACxCgB,IAAO+C,YACNC,IAAKhE,EACL2D,QAAS,WACLhB,EAAa3C,KACbA,MAEfmD,EAAeE,GACZ,4BAAQtC,UAAWC,IAAO0C,cAAeC,QAAS,WAAQL,EAAiBD,EAAgB,KAA3F,U,yCCzCCY,EAAW,SACX9B,EAAqBJ,EAAkBmC,GAA8C,IAAhCC,EAA+B,uDAAN,KACnF,OAAOpH,IAASC,IAAkB,qBAAcmF,EAAd,kBAAmCJ,EAAnC,iBAAoDmC,IACpE,OAAXC,EAAkB,GAAlB,kBAAkCA,KAEpClH,MAAK,SAAA4B,GAAQ,OAAIA,EAAS1B,SAL1B8G,EAAW,SAObnH,GACH,OAAOC,IAASyB,KAAT,iBAAyC1B,IAAUG,MAAK,SAAAC,GAAG,OAAIA,EAAIC,SARrE8G,EAAW,SAUXnH,GACL,OAAOC,IAASqH,OAAT,iBAA0BtH,IAAUG,MAAK,SAAAC,GAAG,OAAIA,EAAIC,SCR7DkH,EAAS,eASX/F,EAAe,CACfsD,MAAO,GACPG,SAAU,GACVE,gBAAiB,EACjBE,YAAa,EACbE,YAAY,EACZE,oBAAqB,GACrBxC,OAAQ,CACJmE,KAAM,GACNC,OAAQ,OAQHvG,EACM,SAACd,GAAD,MAAqB,CAACiB,KAAMsG,EAAQvH,WAD1Cc,EAEQ,SAACd,GAAD,MAAqB,CAACiB,KA3B1B,iBA2B0CjB,WAF9Cc,EAGC,SAACgE,GAAD,MAA8B,CAAC7D,KA3B3B,kBA2B4C6D,UAHjDhE,EAIO,SAACuE,GAAD,MAA0B,CAACpE,KA3BtB,yBA2B8CoE,gBAJ1DvE,EAKE,SAACmC,GAAD,MAAyB,CAAChC,KAxBtB,aAwBwCuG,QAASvE,IALvDnC,EAMW,SAACqE,GAAD,MAA8B,CAAClE,KA5BzB,8BA4BsDkE,oBANvErE,EAOS,SAACyE,GAAD,MAA0B,CAACtE,KA5BtB,2BA4BgDsE,eAP9DzE,EAQU,SAACyE,EAAqBvF,GAAtB,MAA0C,CACzDiB,KA7B6B,4BA8B7BsE,aACAvF,WAwDKyH,GAAe,SAACC,EAAczC,EAAkBhC,GACzD,8CAAO,WAAOpB,EAAwBU,GAA/B,eAAAT,EAAA,6DACHD,EAASf,GAAyB,IAClCe,EAASf,EAAuB4G,IAChC7F,EAASf,EAAkBmC,IAHxB,SAKgBkE,EAAkBO,EAAMzC,EAAUhC,EAAOmE,KAAMnE,EAAOoE,QALtE,OAKGhH,EALH,OAMHwB,EAASf,GAAyB,IAClCe,EAASf,EAAiBT,EAAKsH,QAC/B9F,EAASf,EAA2BT,EAAKuH,aARtC,2CAAP,yDAkCWC,GAnFM,WAAmE,IAAlE9E,EAAiE,uDAAzDvB,EAAcwB,EAA2C,uCAEnF,OAAQA,EAAO/B,MACX,KAAKsG,EACD,OAAO,2BACAxE,GADP,IAEI+B,MAAO/B,EAAM+B,MAAMgC,KAAI,SAAA/B,GACf,OAAIA,EAAE1D,KAAO2B,EAAOhD,OACT,2BAAI+E,GAAX,IAAc+C,UAAU,IAErB/C,OAIvB,IA1DS,iBA2DL,OAAO,2BACAhC,GADP,IAEI+B,MAAO/B,EAAM+B,MAAMgC,KAAI,SAAA/B,GACf,OAAIA,EAAE1D,KAAO2B,EAAOhD,OACT,2BAAI+E,GAAX,IAAc+C,UAAU,IAErB/C,OAIvB,IApEU,kBAqEN,OAAO,2BAAIhC,GAAX,IAAkB+B,MAAO9B,EAAO8B,QACpC,IArEiB,yBAsEb,OAAO,2BAAI/B,GAAX,IAAkBsC,YAAarC,EAAOqC,cAC1C,IAtEsB,8BAuElB,OAAO,2BAAItC,GAAX,IAAkBoC,gBAAiBnC,EAAOmC,kBAC9C,IAvEmB,2BAwEf,OAAO,2BAAIpC,GAAX,IAAkBwC,WAAYvC,EAAOuC,aACzC,IAxE6B,4BAyEzB,OAAO,2BACAxC,GADP,IAEI0C,oBAAqBzC,EAAOuC,WAAP,sBACXxC,EAAM0C,qBADK,CACgBzC,EAAOhD,SACtC+C,EAAM0C,oBAAoBxC,QAAO,SAAA5B,GAAE,OAAIA,IAAO2B,EAAOhD,YAEnE,IA9EW,aA+EP,OAAO,2BAAI+C,GAAX,IAAkBE,OAAQD,EAAOwE,UACrC,QACI,OAAOzE,I,SCvFbgF,GAA0B,SAACC,GAE7B,MADe,IAaNC,GAAuCC,IAAMC,MAAK,SAACC,GAC5D,IAAMnF,EAASoF,YAAY3C,GAU3B,OAAO,6BACH,kBAAC,KAAD,CACI4C,oBAAkB,EAClBC,cAAe,CACXnB,KAAMnE,EAAOmE,KACbC,OAAQpE,EAAOoE,QAEnBmB,SAAUT,GACVU,SAhBY,SAACT,EAAD,GAA4F,IAAxEU,EAAuE,EAAvEA,cAC9BzF,EAAqB,CACvBmE,KAAMY,EAAOZ,KACbC,OAA0B,SAAlBW,EAAOX,OAAoB,KAAyB,SAAlBW,EAAOX,QAErDe,EAAMO,gBAAgB1F,GACtByF,GAAc,MAYT,gBAAEE,EAAF,EAAEA,aAAF,OACG,kBAAC,KAAD,KACI,kBAAC,KAAD,CAAO3H,KAAK,OAAOmC,KAAK,SACxB,kBAAC,KAAD,CAAOA,KAAK,SAASyF,GAAG,UACpB,4BAAQC,MAAM,QAAd,OACA,4BAAQA,MAAM,QAAd,iBACA,4BAAQA,MAAM,SAAd,mBAEJ,4BAAQ7H,KAAK,SAAS8H,SAAUH,GAAhC,kB,6DC+FLI,GAvHoBd,IAAMC,MAAK,SAACC,GAE3C,IAAMnD,EAAWoD,YAAYrD,GACvBG,EAAkBkD,YAAYnD,GAC9BG,EAAcgD,YAAYjD,GAC1BN,EAA0BuD,YAAY1D,GACtCc,EAAsB4C,YAAY7C,GAClCvC,EAASoF,YAAY3C,GAErB7D,EAAWoH,cACXC,EAAUC,cAEhBC,qBACI,WACI,IAAMC,EAASC,SAAkBJ,EAAQK,SAASC,OAAOC,OAAO,IAE5DC,EAAarE,EACbsE,EAAe1G,EAKnB,OAHMoG,EAAO3B,OAAMgC,EAAaE,OAAOP,EAAO3B,OACxC2B,EAAOjC,OAAMuC,EAAY,2BAAOA,GAAP,IAAqBvC,KAAMiC,EAAOjC,QAEzDiC,EAAOhC,QACX,IAAK,OACDsC,EAAY,2BAAOA,GAAP,IAAqBtC,OAAQ,OACzC,MACJ,IAAK,OACDsC,EAAY,2BAAOA,GAAP,IAAqBtC,QAAQ,IACzC,MACJ,IAAK,QACDsC,EAAY,2BAAOA,GAAP,IAAqBtC,QAAQ,IAIjDxF,EAAS4F,GAAaiC,EAAYzE,EAAU0E,MAC7C,IAGPP,qBAAU,WACN,IAAMS,EAAyB,GAE3B5G,EAAOmE,OAAMyC,EAAMzC,KAAOnE,EAAOmE,MACf,OAAlBnE,EAAOoE,SAAiBwC,EAAMxC,OAASyC,OAAO7G,EAAOoE,SACrC,IAAhBhC,IAAmBwE,EAAMnC,KAAOoC,OAAOzE,IAE3C6D,EAAQ9C,KAAK,CACT2D,SAAU,SACVP,OAAQF,aAAsBO,OAEnC,CAAC5G,EAAQoC,IAGZ,IAGM2E,EAAa,SAAChK,GAChB6B,EF8Bc,SAAC7B,GACnB,8CAAO,WAAO6B,EAAwBU,GAA/B,SAAAT,EAAA,6DACHD,EAASf,GAA0B,EAAMd,IADtC,SAEoBmH,EAAgBnH,GAFpC,OAGyB,IAHzB,OAGUkC,YACTL,EAASf,EAAsBd,IAEnC6B,EAASf,GAA0B,EAAOd,IANvC,2CAAP,wDE/BaiK,CAAOjK,KAEdkK,EAAe,SAAClK,GAClB6B,EFsCgB,SAAC7B,GACrB,8CAAO,WAAO6B,EAAwBU,GAA/B,SAAAT,EAAA,6DACHD,EAASf,GAA0B,EAAMd,IADtC,SAEoBmH,EAAkBnH,GAFtC,OAGyB,IAHzB,OAGUkC,YACTL,EAASf,EAAwBd,IAErC6B,EAASf,GAA0B,EAAOd,IANvC,2CAAP,wDEvCamK,CAASnK,KAOtB,OAAQ,yBAAKiE,UAAWC,KAAOW,WAEvB,kBAACoD,GAAD,CAAiBU,gBAND,SAAC1F,GACrBpB,EAAS4F,GAAa,EAAGxC,EAAUhC,OAO/B,kBAAC,EAAD,CACIoC,YAAaA,EACbQ,aApBS,SAACoB,GAClBpF,EAAS4F,GAAaR,EAAYhC,EAAUhC,KAoBpC2C,gBAAiBT,EACjBF,SAAUA,IAEbH,EAAMgC,KAAI,SAAA/B,GAAC,OACR,yBAAKd,UAAWC,KAAOkG,WAAYlD,IAAKnC,EAAE1D,IAC1C,8BACI,yBAAK4C,UAAWC,KAAOmG,UAAWtF,EAAE3B,MACpC,8BACI,0CACA,wCAIJ,6BACI,kBAAC,IAAD,CAASmB,GAAE,mBAAcQ,EAAE1D,KACvB,yBAAK4C,UAAWC,KAAOoG,QAASC,IAAK,gBAChCC,IAAuB,MAAlBzF,EAAExD,OAAOkJ,MAAgB1F,EAAExD,OAAOkJ,MAAQC,SAG5D,6BAEQ3F,EAAE+C,SACI,kBAAC,KAAD,CAAQ7G,KAAM,UAAW0J,KAAM,QAASC,QAAM,EACtC7B,SAAUtD,EAAoBoF,MAAK,SAACxJ,GAAD,OAAgBA,IAAO0D,EAAE1D,MAC5DwF,QAAS,WACLqD,EAAanF,EAAE1D,MAH3B,YAMA,kBAAC,KAAD,CAAQJ,KAAM,UAAW0J,KAAM,QACvB5B,SAAUtD,EAAoBoF,MAAK,SAACxJ,GAAD,OAAgBA,IAAO0D,EAAE1D,MAC5DwF,QAAS,WACLmD,EAAWjF,EAAE1D,MAHzB,UAIkB,+BAAK0D,EAAE3B,SAIvC,8BACA,8BACI,6BAAM2B,EAAEzE,kB,SC5HnBwK,GAA+C,SAAC1C,GACzD,IAAM7C,EAAa8C,YAAY/C,GAE/B,OAAO,oCACH,4BAAK8C,EAAM2C,WACVxF,EAAa,kBAACyF,GAAA,EAAD,MAAe,KAC7B,kBAAC,GAAD,Q,0CCWOC,GAlBqB,SAAC7C,GACjC,OACI,4BAAQnE,UAAWC,KAAOgH,QACtB,yBAAKV,IAAKW,KAAMZ,IAAK,SACrB,yBAAKtG,UAAWC,KAAOkH,OAClBhD,EAAMiD,OACD,iCAAOjD,EAAMgD,MAAb,IAAoB,4BAAQnH,UAAWC,KAAOoH,aAC5CzE,QAASuB,EAAMmD,QADG,WAEpB,kBAAC,IAAD,CAAShH,GAAI,UAAb,YAEE,kBAAC,IAAD,CAAUA,GAAI,e,SCXzBiH,GAAU,WAEf,OAAOvL,IAASC,IAAT,WAA6DC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,SAF/EmL,GAAU,SAIbC,EAAeC,GAAsE,IAApDC,EAAmD,wDAA/BC,EAA+B,uDAAN,KAChF,OAAO3L,IAASyB,KAAT,aAAoE,CAAC+J,QAAOC,WAAUC,aAAYC,YACpGzL,MAAK,SAAAC,GAAG,OAAIA,EAAIC,SANhBmL,GAAU,WASf,OAAOvL,IAASqH,OAAT,eCbFuE,GAAc,WAEnB,OAAO5L,IAASC,IAAT,4BAA4DC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,SCEvFmB,GAAe,CACfH,GAAI,KACJ+J,MAAO,KACPK,MAAO,KACPJ,QAAQ,EACRS,WAAY,MAGVhL,GACe,SAACO,EAAmB+J,EAAsBK,EAAsBJ,GAAhE,MAAqF,CAClGpK,KAbc,qBAaOuG,QAAS,CAACnG,KAAI+J,QAAOK,QAAOJ,YAFnDvK,GAKoB,SAACgL,GAAD,MAAyB,CAC3C7K,KAhBwB,+BAgBOuG,QAAS,CAACsE,gBAuBpCC,GAAkB,yDAAiB,WAAOlK,GAAP,uBAAAC,EAAA,sEACvB0J,KADuB,OACtCQ,EADsC,SAEjBA,EAAO3L,KAA3BgB,EAFqC,EAErCA,GAAI+J,EAFiC,EAEjCA,MAAOK,EAF0B,EAE1BA,MACdO,EAAO9J,aAAewB,IAAeuI,SACrCpK,EAASf,GAAwBO,EAAI+J,EAAOK,GAAO,IAJX,2CAAjB,uDA6BlBS,GAAgB,yDAAiB,WAAOrK,GAAP,iBAAAC,EAAA,sEACnB+J,KADmB,OACpC9J,EADoC,OAEpC+J,EAAa/J,EAASoK,IAC5BtK,EAASf,GAA6BgL,IAHI,2CAAjB,uDAMdM,GAjDK,WAA0D,IAAzDrJ,EAAwD,uDAAhDvB,GAAcwB,EAAkC,uCAEzE,OAAQA,EAAO/B,MACX,IA7Bc,qBA8Bd,IA7BwB,+BA8BpB,OAAO,2BACA8B,GACAC,EAAOwE,SAElB,QACI,OAAOzE,ICrCbsJ,G,uKAEE,OACI,kBAAC,GAAWC,KAAKlE,W,GAHCF,IAAMqE,WAarBC,gBALO,SAACzJ,GAAD,MAA0B,CAC5CsI,OAAQtI,EAAMP,KAAK6I,OACnBD,MAAOrI,EAAMP,KAAK4I,SAGkB,CAAEG,ODkDpB,yDAAiB,WAAO1J,GAAP,SAAAC,EAAA,sEACZ0J,KADY,OAEF,IAFE,OAEtBnL,KAAK6B,YACdL,EAASf,GAAwB,KAAM,KAAM,MAAM,IAHpB,2CAAjB,wDClDP0L,CAAqCH,I,+ECuB9CI,GAAiBC,aAAkD,CAACC,KAAM,SAAzDD,EA3BoF,SAAC,GAAuC,IAAtCE,EAAqC,EAArCA,aAAcC,EAAuB,EAAvBA,MAAOf,EAAgB,EAAhBA,WAC9H,OACI,0BAAMrD,SAAUmE,GACZ,6BACI,kBAACE,GAAA,EAAD,CAAOC,YAAa,QAAS3J,KAAM,QAAS4J,UAAWC,KAAOzE,SAAU,CAAC0E,SAE7E,6BACI,kBAACJ,GAAA,EAAD,CAAOC,YAAa,WAAY3J,KAAM,WAAY4J,UAAWC,KAAOzE,SAAU,CAAC0E,MACxEjM,KAAM,cAEjB,4CACgB,kBAAC6L,GAAA,EAAD,CAAO7L,KAAM,WAAYmC,KAAM,aAAc4J,UAAWC,QAEvEnB,GAAc,yBAAKtB,IAAKsB,EAAYvB,IAAK,YAEzCuB,GAAc,kBAACgB,GAAA,EAAD,CAAOC,YAAa,+BAAgC3J,KAAM,UACnD4J,UAAWC,KAAOzE,SAAU,CAAC0E,QAClDL,GAAS,yBAAK5I,UAAWC,KAAOiJ,kBAC5BN,GAEL,6BACI,4BAAQ5I,UAAWC,KAAOkJ,aAA1B,cAeHC,GAAkB,WAC3B,IAAMvB,EAAazD,aAAY,SAACtF,GAAD,OAAyBA,EAAMP,KAAKsJ,cAC7DT,EAAShD,aAAY,SAACtF,GAAD,OAAyBA,EAAMP,KAAK6I,UAEzDxJ,EAAWoH,cAMjB,OAAIoC,EACO,kBAAC,IAAD,CAAU9G,GAAI,aAGlB,yBAAKN,UAAWqJ,KAAYC,WAC/B,0CACA,mEACA,kBAACd,GAAD,CAAgBhE,SAXH,SAAChI,GFFD,IAACgL,EAAeC,EAAkBC,EAAqBC,EEGpE/J,GFHc4J,EEGChL,EAASgL,MFHKC,EEGEjL,EAASiL,SFHOC,EEGGlL,EAASkL,WFHSC,EEGGnL,EAASmL,QFHnE,uCAAsF,WAAO/J,GAAP,iBAAAC,EAAA,sEAC/E0J,GAAcC,EAAOC,EAAUC,EAAYC,GADoC,QACjG4B,EADiG,QAEzFtL,aAAewB,IAAeuI,QAExCpK,EAASkK,OAELyB,EAAUtL,aAAewB,IAAe+J,mBACxC5L,EAASqK,MAETwB,EAAWF,EAAU7K,SAASgL,OAAS,EAAIH,EAAU7K,SAAS,GAAK,cACvEd,EAASY,aAAW,QAAS,CAACC,OAAQgL,MAV6D,2CAAtF,yDEauB5B,WAAYA,MC/DlDtK,GAAe,CACnBoM,aAAa,GAmBT9M,GACgB,iBAAQ,CAAEG,KAvBJ,4BAiCb4M,GAxBI,WAAkE,IAAjE9K,EAAgE,uDAAxDvB,GAAcwB,EAA0C,uCAElF,OAAQA,EAAO/B,MACb,IAZwB,0BAatB,OAAO,2BACF8B,GADL,IAEE6K,aAAa,IAEjB,QACE,OAAO7K,I,qBCnBPuD,GAAW4B,IAAM5B,SACjB8C,GAAYlB,IAAMkB,UAEX0E,GAAiB,WAAQ,IAAD,EACHxH,IAAS,IAAIyH,MAAOC,kBADjB,mBAC1BC,EAD0B,KACjBC,EADiB,KASjC,OANA9E,IAAU,WACN,IAAM+E,EAAWC,aAAY,kBAAMF,GAAW,IAAIH,MAAOC,oBAAmB,KAE5E,OAAO,kBAAMK,cAAcF,MAC5B,IAEI,0CAAgBF,EAAhB,MCDIK,GATU,WACrB,OACI,yBAAKrK,UAAWC,KAAOqK,QAAvB,iCAEI,kBAAC,GAAD,Q,qBCEGC,GANW,WACxB,OACC,yBAAKvK,UAAWC,KAAOuK,W,UCHbC,GAAoB,WAC7B,OACA,kBAAC,KAAD,CACIpO,OAAO,MACPqO,MAAM,MACNC,SAAS,8CACTC,MAAO,kBAAC,KAAD,CAAQ5N,KAAK,UAAU6N,KAAM,KAA7B,mBCUTC,I,cAAmB7G,IAAM8G,MAAK,kBAAM,kCACpCC,GAAmB/G,IAAM8G,MAAK,kBAAM,iCACpCE,GAAWhH,IAAM8G,MAAK,kBAAM,iCAO5BG,G,kLAGE7C,KAAKlE,MAAMgH,kB,+EAOX,OAAK9C,KAAKlE,MAAMwF,YAKZ,kBAAC,IAAD,KACI,yBAAK3J,UAAU,eACX,kBAAC,GAAD,MACA,kBAAC,EAAD,MACA,yBAAKA,UAAU,uBACX,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOoL,OAAK,EAACC,KAAK,IACXC,OAAQ,kBAAM,kBAAC,WAAD,CAAUC,SAAU,qFAC9B,kBAAC,IAAD,CAAUjL,GAAI,iBAGzB,kBAAC,IAAD,CACI+K,KAAK,WACLC,OAAQ,kBAAM,kBAAC,WAAD,CAAUC,SAAU,qFAC9B,kBAACT,GAAD,UAGR,kBAAC,IAAD,CAAOO,KAAK,oBACLC,OAAQ,kBAAM,kBAAC,WAAD,CAAUC,SAAU,qFAC9B,kBAACP,GAAD,UAGX,kBAAC,IAAD,CAAOK,KAAK,SACLC,OAAQ,kBAAM,kBAAC,GAAD,CAAgBxE,UAAW,YAGhD,kBAAC,IAAD,CAAOuE,KAAK,SACLC,OAAQ,kBAAM,kBAAC,GAAD,SAGrB,kBAAC,IAAD,CACID,KAAK,QACLC,OAAQ,kBAAM,kBAAC,WAAD,CAAUC,SAAU,qFAC9B,kBAACN,GAAD,UAGR,kBAAC,IAAD,CAAOI,KAAK,UAAUtC,UAAWxI,IACjC,kBAAC,IAAD,CAAO8K,KAAK,SAAStC,UAAWvI,IAChC,kBAAC,IAAD,CAAO6K,KAAK,YAAYtC,UAAWtI,IACnC,kBAAC,IAAD,CAAO4K,KAAK,IAAItC,UAAW0B,OAGnC,kBAAC,GAAD,MACA,kBAAC,GAAD,QA/CD,kBAAC1D,GAAA,EAAD,U,GAXD9C,IAAMqE,WAqETC,gBAJS,SAACzJ,GAAD,MAA0B,CAC9C6K,YAAa7K,EAAM0M,IAAI7B,eAGa,CAACwB,cLpEZ,kBAAM,SAACvN,GACpBA,EAASkK,MACf5L,MAAK,WACX0B,EAASf,YKiEE0L,CAA0C2C,ICrFrCO,QACW,cAA7BC,OAAOpG,SAASqG,UAEe,UAA7BD,OAAOpG,SAASqG,UAEhBD,OAAOpG,SAASqG,SAASC,MACvB,2D,+CCR6DC,EAAQ,IAAnEC,G,GAAAA,YAAaC,G,GAAAA,gBAAiBC,G,GAAAA,gBAAiBC,G,GAAAA,QAsBjDC,GAAQJ,GApBIC,GAAgB,CAC9BI,YAAatN,KACbuN,YAAa7M,KACbqB,UAAWgD,GACXrF,KAAM4J,GACNO,KAAM2D,KACNb,IAAK5B,MAYgB8B,OAAOY,sCAAwCL,IAEhBD,GAAgBO,QAExEb,OAAOc,QAAUN,GAEFA,UC3BbO,IAASnB,OAEP,kBAAC,IAAMoB,WAAP,KACE,kBAAC,IAAD,CAAUR,MAAOA,IACf,kBAAC,GAAD,QAGJS,SAASC,eAAe,SFmHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB7Q,MAAK,SAAA8Q,GACJA,EAAaC,gBAEdC,OAAM,SAAAtE,GACLuE,QAAQvE,MAAMA,EAAMxJ,a,mBGxI5BxD,EAAOC,QAAU,CAAC,YAAc,mCAAmC,iBAAmB,wCAAwC,WAAa,kCAAkC,YAAc,qC,mBCA3LD,EAAOC,QAAU,CAAC,UAAY,8BAA8B,WAAa,+BAA+B,aAAe,iCAAiC,cAAgB,oC,kJCW3JuR,EAA6C,SAAC,GAAmD,IAAjDC,EAAgD,EAAhDA,MAAgD,IAAzCC,KAAQC,EAAiC,EAAjCA,QAAS3E,EAAwB,EAAxBA,MAAYzE,EAAY,gCACnGqJ,EAAWD,GAAW3E,EAE5B,OACI,yBAAK5I,UAAYwN,EAAWvN,IAAOwN,YAAc,IAC7C,8CAAcJ,EAAWlJ,IACzB,6BACKqJ,GAAY,8BAAO5E,MAMvBI,EAA0C,SAAC,GAAmD,IAAjDqE,EAAgD,EAAhDA,MAAgD,IAAzCC,KAAQC,EAAiC,EAAjCA,QAAS3E,EAAwB,EAAxBA,MAAYzE,EAAY,gCAChGqJ,EAAWD,GAAW3E,EAE5B,OACI,yBAAK5I,UAAYwN,EAAWvN,IAAOwN,YAAc,IAC7C,2CAAWJ,EAAWlJ,IACtB,6BACKqJ,GAAY,8BAAO5E,O,mBC/BpChN,EAAOC,QAAU,CAAC,UAAY,yBAAyB,QAAU,uBAAuB,aAAe,4BAA4B,WAAa,0BAA0B,SAAW,wBAAwB,eAAiB,8BAA8B,aAAe,8B,gCCD3Q,6BASekL,IANa,WACxB,OACI,kBAAC,IAAD,CAAML,KAAM,Y,gCCHpB,oEAAO,IAAMuC,EAA+B,SAACpE,GACzC,IAAIA,EACJ,MAAO,kBAGE6I,EAAmB,SAACC,GAAD,OAA2C,SAAC9I,GACxE,GAAIA,EAAM6E,OAASiE,EAAW,MAAM,iBAAN,OAAwBA,EAAxB,gB","file":"static/js/main.fa92c570.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__1VCKf\",\"login\":\"Header_login__3V3Qa\",\"logoutButton\":\"Header_logoutButton__21mWM\"};","import {PhotosType, ProfileType} from \"../types/types\";\nimport {instance, APIResponseType} from \"./api\";\n\ntype SavePhotoType = {\n    photos: PhotosType\n}\n\nexport const profileAPI = {\n    getProfile(userId: number) {\n        return instance.get<ProfileType>(`profile/${userId}`).then(res => res.data)\n    },\n    getStatus(userId: number) {\n        return instance.get<string>(`profile/status/${userId}`).then(res => res.data)\n    },\n    updateStatus(status: string) {\n        return instance.put<APIResponseType>(`profile/status`, {status}).then(res => res.data)\n    },\n    savePhoto(photoFile: any) {\n        const formData = new FormData()\n        formData.append('image', photoFile)\n        return instance.put<APIResponseType<SavePhotoType>>('profile/photo', formData).then(res => res.data)\n    },\n    saveProfile(profile: ProfileType) {\n        return instance.put<APIResponseType>(`profile`, profile).then(res => res.data)\n    }\n}","import {PhotosType, ProfileType} from './../types/types';\nimport {FormAction, stopSubmit} from 'redux-form';\nimport {profileAPI} from \"../api/profileApi\";\nimport {BaseThunkType, InferActionsTypes} from \"./reduxStore\";\n\nconst ADD_POST = 'profile/ADD-POST';\nconst SET_USER_PROFILE = 'profile/SET_USER_PROFILE';\nconst SET_STATUS = 'profile/SET_STATUS';\nconst DELETE_POST = 'profile/DELETE_POST';\nconst SAVE_PHOTO_SUCCESS = 'profile/SAVE_PHOTO_SUCCESS';\n\nexport const actions = {\n  addNewPostActionCreator: (newPostText: string) => ({ type: ADD_POST, newPostText }),\n  setUserProfile: (profile: ProfileType) => ({ type: SET_USER_PROFILE, profile }),\n  setStatus: (status: string) => ({ type: SET_STATUS, status }),\n  deletePost: (id: number) => ({ type: DELETE_POST, id }),\n  savePhotoSuccess: (photos: PhotosType) => ({ type: SAVE_PHOTO_SUCCESS, photos })\n}\n\ntype ActionsType = InferActionsTypes<typeof actions>\ntype ThunkType = BaseThunkType<ActionsType | FormAction>\n\nexport type PostsType = {\n  id: number\n  post: string\n  likesCount: number\n}\n\nconst initialState = {\n  posts: [\n    { id: 1, post: 'Hey you there!', likesCount: 4 },\n    { id: 2, post: 'Bro.. nice 2 meet u', likesCount: 46 },\n    { id: 3, post: ':O:O:O:O', likesCount: 12 }\n  ] as Array<PostsType>,\n  profile: null as ProfileType | null,\n  status: ''\n}\n\nexport type InitialStateType = typeof initialState\n\nconst profileReducer = (state = initialState, action: any): InitialStateType => {\n  switch (action.type) {\n    case ADD_POST:\n      return {\n        ...state,\n        posts: [...state.posts, { id: 4, post: action.newPostText, likesCount: 0 }]\n      }\n    case SET_STATUS:\n      return {\n        ...state,\n        status: action.status\n      }\n    case SET_USER_PROFILE:\n      return {\n        ...state, profile: action.profile\n      }\n    case DELETE_POST:\n      return {\n        ...state, posts: state.posts.filter(p => p.id !== action.id)\n      }\n    case SAVE_PHOTO_SUCCESS:\n      return {\n        ...state, profile: { ...state.profile, photos: action.photos } as ProfileType\n      }\n    default:\n      return state\n  }\n}\n\nexport const getUserProfile = (userId: number): ThunkType => {\n  return async (dispatch) => {\n    const response = await profileAPI.getProfile(userId)\n    dispatch(actions.setUserProfile(response))\n  }\n}\n\nexport const getStatus = (userId: number): ThunkType => {\n  return async (dispatch) => {\n    const response = await profileAPI.getStatus(userId)\n    dispatch(actions.setStatus(response))\n  }\n}\n\nexport const updateStatus = (status: string): ThunkType => {\n  return async (dispatch) => {\n    try {\n      const response = await profileAPI.updateStatus(status)\n      if (response.resultCode === 0) {\n        dispatch(actions.setStatus(status))\n      }\n    } catch (error) {\n      alert(error) //here will be error handler\n    }\n  }\n}\n\nexport const savePhoto = (file: any): ThunkType => async (dispatch) => {\n  const response = await profileAPI.savePhoto(file);\n  if (response.resultCode === 0) {\n    dispatch(actions.savePhotoSuccess(response.data.photos));\n  }\n}\n\nexport const saveProfile = (profile: ProfileType): ThunkType => async (dispatch, getState) => {\n  const userId = getState().auth.id\n  const response = await profileAPI.saveProfile(profile);\n  if (response.resultCode === 0) {\n    dispatch(getUserProfile(userId));\n  } else {\n    // let key = response.messages[0].match(/Contacts->(\\w+)/)[1].toLowerCase();\n    dispatch(stopSubmit('editProfile', {\n      _error: response.messages[0]\n      // contacts: { [key]: response.messages[0] },\n    }))\n    return Promise.reject(response.messages[0])\n  }\n  //4 show general error {_error: response.data.messages[0] }\n\n}\n\nexport default profileReducer","module.exports = __webpack_public_path__ + \"static/media/mrrobot.97f0a69e.png\";","import {InferActionsTypes} from \"./reduxStore\";\n\nconst ADD_MESSAGE = 'dialogs/ADD-MESSAGE';\n\ntype DialogType = { \n  id: number \n  name: string \n}\n\nexport type MessageType = {\n  id: number \n  message: string \n}\n\nconst initialState = {\n  dialogs: [\n    { id: 1, name: 'Vavan' },\n    { id: 2, name: 'Iren' },\n    { id: 3, name: 'Bieven' },\n    { id: 4, name: 'Kama' },\n    { id: 5, name: 'Maga' },\n    { id: 6, name: 'Konek' }\n  ] as Array<DialogType>,\n  messages: [\n    { id: 1, message: 'Hello' },\n    { id: 2, message: 'What do we get for 10 dollars?' },\n    { id: 3, message: 'Everything' },\n    { id: 4, message: 'Ok alright' }\n  ] as Array<MessageType>\n}\n\nexport type InitialStateType = typeof initialState\ntype ActionsTypes = InferActionsTypes<typeof actions>\n\nexport const actions = {\n  sendMessageActionCreator: (newMessageText: string) => ({ type: ADD_MESSAGE, newMessageText })\n\n}\n\nconst dialogsReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\n  switch (action.type) {\n    case ADD_MESSAGE:\n      let messageText = action.newMessageText\n      return {\n        ...state,\n        messages: [...state.messages, { id: 5, message: messageText }]\n      }\n    default:\n      return state\n  }\n}\n\nexport default dialogsReducer","import axios from 'axios';\nimport {UsersType} from \"../types/types\";\n\nexport const instance = axios.create({\n    withCredentials: true,\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\n    headers: { 'api-key': '8b8490ba-4ac0-44fd-a386-a1e6ec25d08c' }\n})\n\nexport type GetItemsType = {\n    items: Array<UsersType>\n    totalCount: number\n    error: string | null\n}\n\nexport enum ResultCodeEnum {\n    Success = 0,\n    Error = 1,\n    CaptchaIsRequired = 10\n}\n\nexport type APIResponseType<D = {}, RC = ResultCodeEnum> = {\n    data: D\n    messages: Array<string>\n    resultCode: RC\n}","module.exports = __webpack_public_path__ + \"static/media/eye.16969707.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loginPage\":\"Login_loginPage__-UEgp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"footer\":\"Footer_footer__1w0lV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"sidebar\":\"Sidebar_sidebar__2WupE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Nav_nav__3gICw\",\"item\":\"Nav_item__96rLj\",\"activeLink\":\"Nav_activeLink__GsTVR\"};","import React from 'react';\nimport styles from './Nav.module.css';\nimport {NavLink} from 'react-router-dom';\n\nconst Nav: React.FC = () => {\n    return (\n        <nav className={styles.nav}>\n            <ul>\n                <li className={styles.item}>\n                    <NavLink activeClassName={styles.activeLink} to='/profile'>Profile</NavLink>\n                </li>\n                <li className={styles.item}>\n                    <NavLink activeClassName={styles.activeLink} to='/dialogs'>Messages</NavLink>\n                </li>\n                <li className={styles.item}>\n                    <NavLink activeClassName={styles.activeLink} to='/users'>Users</NavLink>\n                </li>\n                <li className={styles.item}>\n                    <NavLink activeClassName={styles.activeLink} to='/chat'>Chat</NavLink>\n                </li>\n                <li className={styles.item}>\n                    <NavLink activeClassName={styles.activeLink} to='/photos'>Photos</NavLink>\n                </li>\n                <li className={styles.item}>\n                    <NavLink activeClassName={styles.activeLink} to='/music'>Music</NavLink>\n                </li>\n                <li className={styles.item}>\n                    <NavLink activeClassName={styles.activeLink} to='/settings'>Settings</NavLink>\n                </li>\n            </ul>\n        </nav>\n    );\n}\n\nexport default Nav;","import React from 'react';\n\nconst Photos: React.FC = () => {\n  return (\n    <div>\n      Photos\n    </div>\n  );\n}\n\nexport default Photos;\n","import React from 'react';\n\nconst Music: React.FC = () => {\n  return (\n    <div>\n      Music\n    </div>\n  );\n}\n\nexport default Music;\n","import React from 'react';\n\nconst Settings: React.FC = () => {\n  return (\n    <div>\n      Settings\n    </div>\n  );\n}\n\nexport default Settings;\n","import {createSelector} from 'reselect'\nimport {AppStateType} from \"./reduxStore\";\n\nconst getUsersSelector = (state: AppStateType) => {\n    return state.usersPage.users\n}\n\nexport const getUsers = createSelector(getUsersSelector, \n    (users) => {\n   // @ts-ignore\n        return users.filter(u => true)\n})\n\nexport const getPageSize = (state: AppStateType) => {\n    return state.usersPage.pageSize\n}\n\nexport const getTotalUsersCount = (state: AppStateType) => {\n    return state.usersPage.totalUsersCount\n}\n\nexport const getCurrentPage = (state: AppStateType) => {\n    return state.usersPage.currentPage\n}\n\nexport const getIsFetching = (state: AppStateType) => {\n    return state.usersPage.isFetching\n}\n\nexport const getFollowingInProgress = (state: AppStateType) => {\n    return state.usersPage.followingInProgress\n}\n\nexport const getFollow = (state: AppStateType) => {\n    return state.usersPage.follow\n}\n\nexport const getUnfollow = (state: AppStateType) => {\n    return state.usersPage.unfollow\n}\n\nexport const getUsersFilter = (state: AppStateType) => {\n    return state.usersPage.filter\n}\n","import React, { useState } from 'react';\nimport styles from './Pagination.module.css'\nimport cn from 'classnames'\n\ntype PropsType = {\n    pageSize: number\n    totalItemsCount: number\n    currentPage: number\n    onPageChange: (pageNumber: number) => void\n    portionSize?: number\n}\n\nconst Pagination: React.FC<PropsType> = ({ pageSize, totalItemsCount,\n    currentPage, onPageChange, portionSize = 10 }) => {\n\n    let pagesCount = Math.ceil(totalItemsCount / pageSize)\n    let pages: Array<number> = [] \n    for (let i = 1; i <= pagesCount; i++) {\n        pages.push(i)\n    }\n\n    let portionCount = Math.ceil(pagesCount / portionSize);\n    let [portionNumber, setPortionNumber] = useState(1);\n    let leftPortionPageNumber = (portionNumber - 1) * (portionSize + 1);\n    let rightPortionPageNumber = portionNumber * portionSize;\n\n\n    return <div className={styles.paginator}>\n        {portionNumber > 1 &&\n            <button className={styles.portionButton} onClick={() => { setPortionNumber(portionNumber - 1) }}>PREV</button>}\n\n        {pages\n            .filter(p => p >= leftPortionPageNumber && p <= rightPortionPageNumber)\n            .map((p) => {\n                return <span className={cn({\n                    [styles.selectedPage]: currentPage === p\n                }, styles.pageNumber)}\n                    key={p}\n                    onClick={() => {\n                        onPageChange(p);\n                    }}>{p}</span>\n            })}\n        {portionCount > portionNumber &&\n            <button className={styles.portionButton} onClick={() => { setPortionNumber(portionNumber + 1) }}>NEXT</button>}\n\n\n    </div>\n}\n\nexport default Pagination;","import {GetItemsType, instance, APIResponseType} from \"./api\";\n\nexport const usersApi = {\n    getUsers(currentPage: number, pageSize: number, term: string, friend: null | boolean = null) {\n        return instance.get<GetItemsType>(`users?page=${currentPage}&count=${pageSize}&term=${term}`\n            + (friend === null ? '' : `&friend=${friend}`)\n        )\n            .then(response => response.data)\n    },\n    follow(userId: number) {\n        return instance.post<APIResponseType>(`follow/${userId}`).then(res => res.data)\n    },\n    unfollow(userId: number) {\n        return instance.delete(`follow/${userId}`).then(res => res.data) as Promise<APIResponseType>\n    }\n}","import {UsersType} from '../types/types';\nimport {AppStateType, BaseThunkType, InferActionsTypes} from \"./reduxStore\";\nimport {Dispatch} from \"redux\";\nimport {usersApi} from \"../api/usersApi\";\n\nconst FOLLOW = 'users/FOLLOW';\nconst UNFOLLOW = 'users/UNFOLLOW';\nconst SET_USERS = 'users/SET_USERS';\nconst SET_CURRENT_PAGE = 'users/SET_CURRENT_PAGE';\nconst SET_TOTAL_USERS_COUNT = 'users/SET_TOTAL_USERS_COUNT';\nconst TOGGLE_IS_FETCHING = 'users/TOGGLE_IS_FETCHING';\nconst TOGGLE_IS_FOLLOWING_PROGRESS = 'users/TOGGLE_IS_FOLLOWING';\nconst SET_FILTER = 'SET_FILTER';\n\nlet initialState = {\n    users: [] as Array<UsersType>,\n    pageSize: 10,\n    totalUsersCount: 0,\n    currentPage: 1,\n    isFetching: true,\n    followingInProgress: [] as Array<number>, // array of users ids\n    filter: {\n        term: '',\n        friend: null as null | boolean\n    }\n}\n\ntype InitialStateType = typeof initialState\nexport type FilterType = typeof initialState.filter\ntype ActionsTypes = InferActionsTypes<typeof actions>\n\nexport const actions = {\n    followSuccess: (userId: number) => ({type: FOLLOW, userId} as const),\n    unfollowSuccess: (userId: number) => ({type: UNFOLLOW, userId} as const),\n    setUsers: (users: Array<UsersType>) => ({type: SET_USERS, users} as const),\n    setCurrentPage: (currentPage: number) => ({type: SET_CURRENT_PAGE, currentPage} as const),\n    setFilter: (filter: FilterType) => ({type: SET_FILTER, payload: filter} as const),\n    setTotalUsersCount: (totalUsersCount: number) => ({type: SET_TOTAL_USERS_COUNT, totalUsersCount} as const),\n    toggleIsFetching: (isFetching: boolean) => ({type: TOGGLE_IS_FETCHING, isFetching} as const),\n    toggleIsFollowing: (isFetching: boolean, userId: number) => ({\n        type: TOGGLE_IS_FOLLOWING_PROGRESS,\n        isFetching,\n        userId\n    } as const)\n}\n\ntype DispatchType = Dispatch<ActionsTypes>\ntype GetStateType = () => AppStateType\ntype ThunkType = BaseThunkType<ActionsTypes>\n\nconst usersReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\n\n    switch (action.type) {\n        case FOLLOW:\n            return {\n                ...state,\n                users: state.users.map(u => {\n                        if (u.id === action.userId) {\n                            return {...u, followed: true}\n                        }\n                        return u;\n                    }\n                )\n            }\n        case UNFOLLOW:\n            return {\n                ...state,\n                users: state.users.map(u => {\n                        if (u.id === action.userId) {\n                            return {...u, followed: false}\n                        }\n                        return u;\n                    }\n                )\n            }\n        case SET_USERS:\n            return {...state, users: action.users}\n        case SET_CURRENT_PAGE:\n            return {...state, currentPage: action.currentPage}\n        case SET_TOTAL_USERS_COUNT:\n            return {...state, totalUsersCount: action.totalUsersCount}\n        case TOGGLE_IS_FETCHING:\n            return {...state, isFetching: action.isFetching}\n        case TOGGLE_IS_FOLLOWING_PROGRESS:\n            return {\n                ...state,\n                followingInProgress: action.isFetching\n                    ? [...state.followingInProgress, action.userId]\n                    : state.followingInProgress.filter(id => id !== action.userId)\n            }\n        case SET_FILTER:\n            return {...state, filter: action.payload}\n        default:\n            return state\n    }\n}\n\n\nexport const requestUsers = (page: number, pageSize: number, filter: FilterType): ThunkType => {\n    return async (dispatch: DispatchType, getState: GetStateType) => {\n        dispatch(actions.toggleIsFetching(true))\n        dispatch(actions.setCurrentPage(page))\n        dispatch(actions.setFilter(filter))\n\n        const data = await usersApi.getUsers(page, pageSize, filter.term, filter.friend)\n        dispatch(actions.toggleIsFetching(false))\n        dispatch(actions.setUsers(data.items))\n        dispatch(actions.setTotalUsersCount(data.totalCount))\n    }\n}\n\nexport const follow = (userId: number): ThunkType => {\n    return async (dispatch: DispatchType, getState: GetStateType) => {\n        dispatch(actions.toggleIsFollowing(true, userId))\n        const response = await usersApi.follow(userId)\n        if (response.resultCode === 0) {\n            dispatch(actions.followSuccess(userId))\n        }\n        dispatch(actions.toggleIsFollowing(false, userId))\n    }\n}\n\nexport const unfollow = (userId: number): ThunkType => {\n    return async (dispatch: DispatchType, getState: GetStateType) => {\n        dispatch(actions.toggleIsFollowing(true, userId))\n        const response = await usersApi.unfollow(userId)\n        if (response.resultCode === 0) {\n            dispatch(actions.unfollowSuccess(userId))\n        }\n        dispatch(actions.toggleIsFollowing(false, userId))\n    }\n}\n\nexport default usersReducer","import React from \"react\";\nimport {Field, Form, Formik} from \"formik\";\nimport {FilterType} from \"../../redux/usersReducer\";\nimport {useSelector} from \"react-redux\";\nimport {getUsersFilter} from \"../../redux/userSelectors\";\n\nconst usersSearchFormValidate = (values: any) => {\n    const errors = {};\n    return errors;\n}\n\ntype PropsType = {\n    onFilterChanged: (filter: FilterType) => void\n}\n\ntype FormType = {\n    term: string\n    friend: 'true' | 'false' | 'null'\n}\n\nexport const UsersSearchForm: React.FC<PropsType> = React.memo((props) => {\n    const filter = useSelector(getUsersFilter)\n\n    const onSearchBtn = (values: FormType, {setSubmitting}: { setSubmitting: (isSubmitting: boolean) => void }) => {\n        const filter: FilterType = {\n            term: values.term,\n            friend: values.friend === 'null' ? null : values.friend === 'true' ? true : false\n        }\n        props.onFilterChanged(filter)\n        setSubmitting(false)\n    }\n    return <div>\n        <Formik\n            enableReinitialize\n            initialValues={{\n                term: filter.term,\n                friend: filter.friend\n            }}\n            validate={usersSearchFormValidate}\n            onSubmit={onSearchBtn}\n        >\n            {({isSubmitting}) => (\n                <Form>\n                    <Field type=\"text\" name=\"term\"/>\n                    <Field name=\"friend\" as=\"select\">\n                        <option value=\"null\">All</option>\n                        <option value=\"true\">Followed only</option>\n                        <option value=\"false\">Unollowed only</option>\n                    </Field>\n                    <button type=\"submit\" disabled={isSubmitting}>\n                        Search\n                    </button>\n                </Form>\n            )}\n        </Formik>\n    </div>\n})","import React, {useEffect} from 'react';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {NavLink, useHistory} from 'react-router-dom';\nimport {UsersType} from '../../types/types';\nimport {\n    getCurrentPage,\n    getFollowingInProgress,\n    getPageSize,\n    getTotalUsersCount,\n    getUsers,\n    getUsersFilter\n} from \"../../redux/userSelectors\";\n\nimport Pagination from './Pagination';\nimport {FilterType, follow, requestUsers, unfollow} from \"../../redux/usersReducer\";\nimport {UsersSearchForm} from \"./UsersSearchForm\";\n\nimport userPhoto from '../../assets/mrrobot.png'\nimport {Button} from \"antd\";\nimport styles from './Users.module.css'\nimport * as queryString from \"querystring\";\n\ntype PropsType = {}\ntype QueryParamsType = { term?: string; page?: string; friend?: string }\n\nconst Users: React.FC<PropsType> = React.memo((props) => {\n\n    const pageSize = useSelector(getPageSize)\n    const totalUsersCount = useSelector(getTotalUsersCount)\n    const currentPage = useSelector(getCurrentPage)\n    const users: Array<UsersType> = useSelector(getUsers)\n    const followingInProgress = useSelector(getFollowingInProgress)\n    const filter = useSelector(getUsersFilter)\n\n    const dispatch = useDispatch()\n    const history = useHistory()\n\n    useEffect(\n        () => {\n            const parsed = queryString.parse(history.location.search.substr(1)) as { term: string, page: string, friend: string }\n\n            let actualPage = currentPage\n            let actualFilter = filter\n\n            if (!!parsed.page) actualPage = Number(parsed.page)\n            if (!!parsed.term) actualFilter = {...actualFilter, term: parsed.term}\n\n            switch (parsed.friend) {\n                case \"null\":\n                    actualFilter = {...actualFilter, friend: null}\n                    break;\n                case \"true\":\n                    actualFilter = {...actualFilter, friend: true}\n                    break;\n                case \"false\":\n                    actualFilter = {...actualFilter, friend: false}\n                    break;\n            }\n\n            dispatch(requestUsers(actualPage, pageSize, actualFilter))\n        }, []\n    )\n\n    useEffect(() => {\n        const query: QueryParamsType = {}\n\n        if (filter.term) query.term = filter.term\n        if (filter.friend !== null) query.friend = String(filter.friend)\n        if (currentPage !== 1) query.page = String(currentPage)\n\n        history.push({\n            pathname: '/users',\n            search: queryString.stringify(query)\n        })\n    }, [filter, currentPage])\n\n\n    const onPageChange = (pageNumber: number) => {\n        dispatch(requestUsers(pageNumber, pageSize, filter))\n    }\n    const followUser = (userId: number) => {\n        dispatch(follow(userId))\n    }\n    const unfollowUser = (userId: number) => {\n        dispatch(unfollow(userId))\n    }\n\n    const onFilterChanged = (filter: FilterType) => {\n        dispatch(requestUsers(1, pageSize, filter))\n    }\n\n    return (<div className={styles.usersPage}>\n\n            <UsersSearchForm onFilterChanged={onFilterChanged}/>\n\n            <Pagination\n                currentPage={currentPage}\n                onPageChange={onPageChange}\n                totalItemsCount={totalUsersCount}\n                pageSize={pageSize}\n            />\n            {users.map(u =>\n                <div className={styles.userInList} key={u.id}>\n                <span>\n                    <div className={styles.userName}>{u.name}</div>\n                    <span>\n                        <div>Country: </div>\n                        <div>City: </div>\n                        {/* <div>u.location.country</div>\n                        <div>u.location.city</div>  */}\n                    </span>\n                    <div>\n                        <NavLink to={`/profile/${u.id}`}>\n                            <img className={styles.userPic} alt={'small userpic'}\n                                 src={u.photos.small != null ? u.photos.small : userPhoto}/>\n                        </NavLink>\n                    </div>\n                    <div>\n                        {// @ts-ignore\n                            u.followed\n                                ? <Button type={\"primary\"} size={'small'} danger\n                                          disabled={followingInProgress.some((id: number) => id === u.id)}\n                                          onClick={() => {\n                                              unfollowUser(u.id)\n                                          }}>unfollow</Button>\n\n                                : <Button type={\"primary\"} size={'small'}\n                                          disabled={followingInProgress.some((id: number) => id === u.id)}\n                                          onClick={() => {\n                                              followUser(u.id)\n                                          }}>follow <b> {u.name}</b></Button>\n                        }\n                    </div>\n                </span>\n                    <span>\n                    <span>\n                        <div>{u.status}</div>\n                    </span>\n                </span>\n                </div>)}\n        </div>\n    )\n})\n\nexport default Users;","import React from 'react';\nimport {useSelector} from 'react-redux';\nimport Users from './Users';\nimport Preloader from '../common/Preloader/Preloader'\n\nimport {getIsFetching} from '../../redux/userSelectors';\n\n\ntype UsersPagePropsType = {\n    pageTitle: string\n}\n\nexport const UsersContainer: React.FC<UsersPagePropsType> = (props) => {\n    const isFetching = useSelector(getIsFetching)\n\n    return <>\n        <h2>{props.pageTitle}</h2>\n        {isFetching ? <Preloader/> : null}\n        <Users/>\n    </>\n}\n","import React from 'react';\nimport styles from './Header.module.css';\nimport { NavLink, Redirect } from 'react-router-dom';\nimport logo from '../../assets/eye.png'\n\nexport type PropsType = {\n    isAuth: boolean\n    login: string\n    logout: () => void\n}\n\nconst Header: React.FC<PropsType> = (props) => {\n    return (\n        <header className={styles.header}>\n            <img src={logo} alt={'logo'} />\n            <div className={styles.login}>\n                {props.isAuth\n                    ? <div> {props.login} <button className={styles.logoutButton}\n                        onClick={props.logout}>Logout</button></div>\n                    : <NavLink to={'/login'}>\n                        L O G I N\n                        <Redirect to={'/login'} />\n                    </NavLink>}\n            </div>\n\n        </header>\n    );\n}\n\nexport default Header;","import {instance, APIResponseType} from \"./api\";\n\ntype MeResponseDataType = {\n        id: number\n        email: string\n        login: string\n}\ntype LoginResponseDataType = {\n        userId: number\n}\nexport const authAPI = {\n    me() {\n        return instance.get<APIResponseType<MeResponseDataType>>(`auth/me`).then(res => res.data)\n    },\n    login(email: string, password: string, rememberMe = false, captcha: null | string = null) {\n        return instance.post<APIResponseType<LoginResponseDataType>>(`auth/login`, {email, password, rememberMe, captcha})\n            .then(res => res.data)\n    },\n    logout() {\n        return instance.delete(`auth/login`)\n    }\n}","import {instance} from \"./api\";\n\ntype GetCaptchaUrlType = {\n    url: string\n}\n\nexport const securityAPI = {\n    getCaptchaUrl() {\n        return instance.get<GetCaptchaUrlType>(`security/get-captcha-url`).then(res => res.data)\n    }\n}","import {FormAction, stopSubmit} from 'redux-form';\nimport {authAPI} from \"../api/authApi\";\nimport {securityAPI} from \"../api/securityApi\";\nimport {ResultCodeEnum} from \"../api/api\";\nimport {BaseThunkType, InferActionsTypes} from \"./reduxStore\";\nimport {Action} from \"redux\";\n\nconst SET_USER_DATA = 'auth/SET_USER_DATA';\nconst GET_CAPTCHA_URL_SUCCESS = 'auth/GET_CAPTCHA_URL_SUCCESS';\n\nlet initialState = {\n    id: null as number | null,\n    login: null as string | null,\n    email: null as string | null,\n    isAuth: false,\n    captchaUrl: null as string | null // if null captcha is not required\n}\n\nconst actions = {\n    setAuthUserData: (id: number | null, login: string | null, email: string | null, isAuth: boolean) => ({\n        type: SET_USER_DATA, payload: {id, login, email, isAuth}\n    } as const),\n\n    getCaptchaUrlSuccess: (captchaUrl: string) => ({\n        type: GET_CAPTCHA_URL_SUCCESS, payload: {captchaUrl}\n    } as const)\n\n}\n\ntype InitialStateType = typeof initialState\ntype ActionsTypes = InferActionsTypes<typeof actions >\ntype ThunkType = BaseThunkType<ActionsTypes | FormAction>\n\nconst authReducer = (state = initialState, action: any): InitialStateType => {\n\n    switch (action.type) {\n        case SET_USER_DATA:\n        case GET_CAPTCHA_URL_SUCCESS:\n            return {\n                ...state,\n                ...action.payload\n            }\n        default:\n            return state\n    }\n}\n\nexport const getAuthUserData = (): ThunkType => async (dispatch) => {\n    const meData = await authAPI.me()\n    const {id, login, email} = meData.data\n    if (meData.resultCode === ResultCodeEnum.Success) {\n        dispatch(actions.setAuthUserData(id, login, email, true))\n    }\n}\n\nexport const login = (email: string, password: string, rememberMe: boolean, captcha: string): ThunkType => async (dispatch) => {\n    const loginData = await authAPI.login(email, password, rememberMe, captcha)\n    if (loginData.resultCode === ResultCodeEnum.Success) {\n        // success get auth data\n        dispatch(getAuthUserData())\n    } else {\n        if (loginData.resultCode === ResultCodeEnum.CaptchaIsRequired) {\n            dispatch(getCaptchaUrl())\n        }\n        let messaage = loginData.messages.length > 0 ? loginData.messages[0] : 'Some error!'\n        dispatch(stopSubmit('login', {_error: messaage}))\n    }\n}\n\nexport const logout = (): ThunkType => async (dispatch) => {\n    const response = await authAPI.logout()\n    if (response.data.resultCode === 0) {\n        dispatch(actions.setAuthUserData(null, null, null, false))\n    }\n}\n\nexport const getCaptchaUrl = (): ThunkType => async (dispatch) => {\n    const response = await securityAPI.getCaptchaUrl()\n    const captchaUrl = response.url\n    dispatch(actions.getCaptchaUrlSuccess(captchaUrl))\n}\n\nexport default authReducer","import React from 'react';\nimport Header, {PropsType} from './Header';\nimport { connect } from 'react-redux';\nimport { logout } from '../../redux/authReducer';\nimport {AppStateType} from \"../../redux/reduxStore\";\n\nclass HeaderComponent extends React.Component<PropsType> {\n    render() {\n        return (\n            <Header {...this.props} />\n        );\n    }\n}\n\nlet mapStateToProps = (state: AppStateType) => ({\n    isAuth: state.auth.isAuth,\n    login: state.auth.login\n})\n\nexport default connect(mapStateToProps, { logout })(HeaderComponent);","import React from 'react';\nimport {Field, InjectedFormProps, reduxForm} from 'redux-form'\nimport {Input} from '../common/FormsControls/FormsControls';\nimport {required} from '../../validators/validators';\nimport {connect, useDispatch, useSelector} from 'react-redux';\nimport {login} from '../../redux/authReducer';\nimport {Redirect} from 'react-router-dom';\nimport styles from '../common/FormsControls/FormsControls.module.css'\nimport loginStyles from './Login.module.css'\nimport {AppStateType} from \"../../redux/reduxStore\";\n\ntype LoginOwnPropsType = {\n    captchaUrl: string | null\n}\n\nconst LoginForm: React.FC<InjectedFormProps<LoginFormValuesType, LoginOwnPropsType> & LoginOwnPropsType> = ({handleSubmit, error, captchaUrl}) => {\n    return (\n        <form onSubmit={handleSubmit}>\n            <div>\n                <Field placeholder={'Email'} name={'email'} component={Input} validate={[required]}/>\n            </div>\n            <div>\n                <Field placeholder={'Password'} name={'password'} component={Input} validate={[required]}\n                       type={'password'}/>\n            </div>\n            <div>\n                Remember me <Field type={'checkbox'} name={'rememberMe'} component={Input}/>\n            </div>\n            {captchaUrl && <img src={captchaUrl} alt={'captcha'}/>}\n\n            {captchaUrl && <Field placeholder={'Enter the symbols from image'} name={'captcha'}\n                                  component={Input} validate={[required]}/>}\n            {error && <div className={styles.formSummaryError}>\n                {error}\n            </div>}\n            <div>\n                <button className={styles.loginButton}>Login</button>\n            </div>\n        </form>\n    )\n}\n\nconst LoginReduxForm = reduxForm<LoginFormValuesType, LoginOwnPropsType>({form: 'login'})(LoginForm)\n\ntype LoginFormValuesType = {\n    email: string\n    password: string\n    rememberMe: boolean\n    captcha: string\n}\n\nexport const Login: React.FC = () => {\n    const captchaUrl = useSelector((state: AppStateType) => state.auth.captchaUrl)\n    const isAuth = useSelector((state: AppStateType) => state.auth.isAuth)\n\n    const dispatch = useDispatch()\n\n    const onSubmit = (formData: any) => {\n        dispatch(login(formData.email, formData.password, formData.rememberMe, formData.captcha))\n    }\n\n    if (isAuth) {\n        return <Redirect to={'/profile'}/>\n    }\n\n    return <div className={loginStyles.loginPage}>\n        <h1>Login page</h1>\n        <p>Please enter your login and password</p>\n        <LoginReduxForm onSubmit={onSubmit} captchaUrl={captchaUrl}/>\n    </div>\n}\n","import { getAuthUserData } from \"./authReducer\";\nimport {InferActionsTypes} from \"./reduxStore\";\n\nconst INITIALIZED_SUCCESS = 'app/INITIALIZED_SUCCESS';\n\nconst initialState = {\n  initialized: false\n}\n\nexport type InitialStateType = typeof initialState\ntype ActionsType = InferActionsTypes<typeof actions>\n\nconst appReducer = (state = initialState, action: ActionsType): InitialStateType => {\n\n  switch (action.type) {\n    case INITIALIZED_SUCCESS:\n      return {\n        ...state,\n        initialized: true\n      }\n    default:\n      return state\n  }\n}\n\nconst actions = {\n  initializedSuccess: ()  => ({ type: INITIALIZED_SUCCESS })\n}\n\nexport const initializeApp = () => (dispatch: any) => {\n  let promise = dispatch(getAuthUserData())\n  promise.then(() => {\n    dispatch(actions.initializedSuccess())\n  })\n}\n\nexport default appReducer\n","import React from \"react\";\n\nconst useState = React.useState\nconst useEffect = React.useEffect\n\nexport const Time: React.FC = () =>  {\n    const [theTime, setTheTime] = useState(new Date().toLocaleString())\n\n    useEffect(() => {\n        const interval = setInterval(() => setTheTime(new Date().toLocaleString()), 1000)\n\n        return () => clearInterval(interval)\n    }, [])\n\n    return <p>Now time is {theTime}.</p>\n}","import React from 'react';\nimport styles from './Footer.module.css';\nimport {Time} from \"../common/Time/Time\";\n\nconst Footer: React.FC = () => {\n    return (\n        <div className={styles.footer}>\n            :\\ Pet Project by Vladimir L.\n            <Time/>\n        </div>\n    );\n}\n\nexport default Footer;","import React from 'react';\nimport styles from './Sidebar.module.css';\n\n\nconst Sidebar: React.FC = () => {\n  return (\n   <div className={styles.sidebar}></div>\n  )\n}\n\nexport default Sidebar;","import React from 'react';\nimport {Result, Button} from \"antd\";\n\nexport const page404: React.FC = () => {\n    return(\n    <Result\n        status=\"404\"\n        title=\"404\"\n        subTitle=\"Sorry, the page you visited does not exist.\"\n        extra={<Button type=\"primary\" href={\"/\"}>Back Profile</Button>}\n    />)\n}\n","import React, {Suspense} from 'react';\nimport {connect} from 'react-redux';\nimport Nav from './components/Nav/Nav';\nimport Photos from './components/Photos/Photos';\nimport Music from './components/Music/Music';\nimport Settings from './components/Settings/Settings';\nimport {HashRouter, Route, Switch, Redirect} from 'react-router-dom';\nimport {UsersContainer} from './components/Users/UsersContainer';\nimport HeaderComponent from './components/Header/HeaderComponent';\nimport {Login} from './components/Login/Login';\nimport {initializeApp} from './redux/appReducer';\nimport Preloader from './components/common/Preloader/Preloader';\nimport Footer from './components/Footer/Footer';\nimport Sidebar from './components/Sidebar/Sideber';\nimport {page404} from \"./components/common/404/page404\";\nimport {AppStateType} from \"./redux/reduxStore\";\nimport 'antd/dist/antd.css';\nimport './App.css';\n\nconst DialogsContainer = React.lazy(() => import('./components/Dialogs/DialogsContainer'))\nconst ProfileContainer = React.lazy(() => import('./components/Profile/ProfileContainer'))\nconst ChatPage = React.lazy(() => import('./Pages/Chat/ChatPage'))\n\ntype MapPropsType = ReturnType<typeof mapStateToProps>\ntype DispatchPropsType = {\n    initializeApp: () => void\n}\n\nclass App extends React.Component<MapPropsType & DispatchPropsType> {\n\n    componentDidMount() {\n        this.props.initializeApp()\n    }\n\n    componentWillUnmount() {\n    }\n\n    render() {\n        if (!this.props.initialized) {\n            return <Preloader/>\n        }\n        // HashRouter used for gh pages. Please use BrowserRouter\n        return (\n            <HashRouter>\n                <div className='app-wrapper'>\n                    <HeaderComponent/>\n                    <Nav/>\n                    <div className='app-wrapper-content'>\n                        <Switch>\n                            <Route exact path='/'\n                                   render={() => <Suspense fallback={<div>Загрузка...</div>}>\n                                       <Redirect to={'/profile'}/>\n                                   </Suspense>}\n                            />\n                            <Route\n                                path='/dialogs'\n                                render={() => <Suspense fallback={<div>Загрузка...</div>}>\n                                    <DialogsContainer/>\n                                </Suspense>}\n                            />\n                            <Route path='/profile/:userId?'\n                                   render={() => <Suspense fallback={<div>Загрузка...</div>}>\n                                       <ProfileContainer/>\n                                   </Suspense>}\n                            />\n                            <Route path='/users'\n                                   render={() => <UsersContainer pageTitle={'Devs'}\n                                   />}\n                            />\n                            <Route path='/login'\n                                   render={() => <Login\n                                   />}\n                            />\n                            <Route\n                                path='/chat'\n                                render={() => <Suspense fallback={<div>Загрузка...</div>}>\n                                    <ChatPage/>\n                                </Suspense>}\n                            />\n                            <Route path='/photos' component={Photos}/>\n                            <Route path='/music' component={Music}/>\n                            <Route path='/settings' component={Settings}/>\n                            <Route path='*' component={page404}/>\n                        </Switch>\n                    </div>\n                    <Sidebar/>\n                    <Footer/>\n                </div>\n            </HashRouter>\n        );\n    }\n}\n\nconst mapStateToProps = (state: AppStateType) => ({\n    initialized: state.app.initialized\n})\n\nexport default connect(mapStateToProps, {initializeApp})(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n"," import profileReducer from './profileReducer'\nimport dialogsReducer from './dialogsReducer'\nimport usersReducer from './usersReducer'\nimport authReducer from './authReducer'\nimport appReducer from './appReducer'\nimport { reducer as formReducer } from 'redux-form'\n\nimport thunkMiddleware, {ThunkAction} from 'redux-thunk'\n import {Action} from \"redux\";\n\nconst { createStore, combineReducers, applyMiddleware, compose } = require(\"redux\")\n\nlet rootReducer = combineReducers({\n    profilePage: profileReducer,\n    dialogsPage: dialogsReducer,\n    usersPage: usersReducer,\n    auth: authReducer,\n    form: formReducer,\n    app: appReducer\n})\n\ntype RootReducerType = typeof rootReducer // (global state: AppStateType) => AppStateType\nexport type AppStateType = ReturnType<RootReducerType>\n\n//...args: any[]) => any  это action creator\nexport type InferActionsTypes<T> = T extends { [key: string]: (...args: any[]) => infer U } ? U : never\n\nexport type BaseThunkType <A extends Action, R = Promise<void>> = ThunkAction<R, AppStateType, unknown, A>\n\n// @ts-ignore\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\n\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunkMiddleware)))\n// @ts-ignore\nwindow._store_ = store\n\nexport default store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './redux/reduxStore';\nimport { Provider } from 'react-redux';\n\n\n  ReactDOM.render(\n\n    <React.StrictMode>\n      <Provider store={store}>\n        <App />\n      </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n  );\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__3oI2W\",\"formSummaryError\":\"FormsControls_formSummaryError__1F2-S\",\"saveButton\":\"FormsControls_saveButton__3VGCw\",\"loginButton\":\"FormsControls_loginButton__3wK0r\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"paginator\":\"Pagination_paginator__1TXwA\",\"pageNumber\":\"Pagination_pageNumber__1r7yr\",\"selectedPage\":\"Pagination_selectedPage__zdDHb\",\"portionButton\":\"Pagination_portionButton__12LKm\"};","import React from 'react'\nimport styles from './FormsControls.module.css'\nimport {WrappedFieldProps} from \"redux-form\";\n\ntype TextareaInputPropsType = {\n    input: WrappedFieldProps\n    meta: {\n        touched: boolean\n        error: string\n    }\n}\n\nexport const Textarea: React.FC<TextareaInputPropsType> = ({ input, meta: { touched, error }, ...props }) => {\n    const hasError = touched && error\n\n    return (\n        <div className={(hasError ? styles.formControl : '')}>\n            <textarea {...input} {...props} />\n            <div>\n                {hasError && <span>{error}</span>}\n            </div>\n        </div>\n    )\n}\n\nexport const Input: React.FC<TextareaInputPropsType> = ({ input, meta: { touched, error }, ...props }) => {\n    const hasError = touched && error\n\n    return (\n        <div className={(hasError ? styles.formControl : '')}>\n            <input {...input} {...props} />\n            <div>\n                {hasError && <span>{error}</span>}\n            </div>\n        </div>\n    )\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"usersPage\":\"Users_usersPage__3xdAn\",\"userPic\":\"Users_userPic__1_BqH\",\"selectedPage\":\"Users_selectedPage__J63sh\",\"userInList\":\"Users_userInList__OVJXd\",\"userName\":\"Users_userName__1mt5V\",\"unfollowButton\":\"Users_unfollowButton__3QsTy\",\"followButton\":\"Users_followButton__2xwHU\"};","import React from 'react'\nimport { Spin } from 'antd';\n\nconst Preloader: React.FC = () => {\n    return (\n        <Spin size={\"large\"}/>\n    )\n}\n\nexport default Preloader","export type FieldValidatorType = (value: string) => string | undefined\n\nexport const required: FieldValidatorType = (value) => {\n    if (value) return undefined\n    return 'Required field'\n}\n\nexport const maxLengthCreator = (maxLength: number): FieldValidatorType => (value) => {\n    if (value.length > maxLength) return `max length is ${maxLength} symbols`\n    return undefined\n}\n"],"sourceRoot":""}