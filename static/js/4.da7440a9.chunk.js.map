{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","hoc/withAuthRedirect.tsx","components/Dialogs/DialogsContainer.tsx"],"names":["module","exports","DialogItem","props","className","styles","dialog","active","to","id","name","Message","message","maxLength50","maxLengthCreator","AddMessageReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","placeholder","validate","required","sendMessageButton","Dialogs","state","dialogsPage","dialogElements","dialogs","map","el","key","messagesElements","messages","msg","dialogsList","messagesList","values","sendMessageActionCreator","newMessageText","mapStateToPropsForRedirect","isAuth","auth","compose","connect","actions","WrappedComponent","restProps"],"mappings":"iGACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,YAAc,6BAA6B,aAAe,8BAA8B,OAAS,wBAAwB,OAAS,wBAAwB,kBAAoB,qC,sGCepNC,EAPyB,SAACC,GACvC,OAAO,yBAAKC,UAAWC,IAAOC,OAAS,IAAMD,IAAOE,QAClD,kBAAC,IAAD,CAASC,GAAI,YAAcL,EAAMM,IAAjC,IAAuCN,EAAMO,KAA7C,QCIWC,EATuB,SAACR,GAErC,OACE,6BACGA,EAAMS,U,kCCuCPC,EAAcC,YAAiB,IAoB/BC,EAAsBC,YAA8B,CAAEC,KAAM,sBAAtCD,EAjBxB,SAACb,GACH,OACE,0BAAMe,SAAUf,EAAMgB,cACpB,6BAEE,kBAACC,EAAA,EAAD,CAAOC,UAAWC,IAChBC,YAAa,oBACbb,KAAM,iBACNc,SAAU,CAACC,IAAUZ,MAGzB,6BAAK,4BAAQT,UAAWC,IAAOqB,mBAA1B,qBAQIC,EAnDsB,SAACxB,GAEpC,IAAMyB,EAAQzB,EAAM0B,YAEdC,EAAiBF,EAAMG,QAAQC,KAAI,SAAAC,GAAE,OAAI,kBAAC,EAAD,CAAYvB,KAAMuB,EAAGvB,KAAMwB,IAAKD,EAAGxB,GAAIA,GAAIwB,EAAGxB,QAEvF0B,EAAmBP,EAAMQ,SAASJ,KAAI,SAAAK,GAAG,OAAI,kBAAC,EAAD,CAASzB,QAASyB,EAAIzB,QAASsB,IAAKG,EAAI5B,QAM3F,OACE,yBAAKL,UAAWC,IAAO0B,SACrB,yBAAK3B,UAAWC,IAAOiC,aACrB,uCACCR,GAEH,6BACE,yBAAK1B,UAAWC,IAAOkC,cACrB,wCACCJ,EACD,kBAACpB,EAAD,CAAqBG,SAdP,SAACsB,GACrBrC,EAAMsC,yBAAyBD,EAAOE,uB,yBCxBtCC,EAA6B,SAACf,GAAD,MAA0B,CACvDgB,OAAQhB,EAAMiB,KAAKD,S,YCSRE,4BACbC,aARoB,SAACnB,GAErB,MAAO,CACLC,YAAaD,EAAMC,eAKd,eAAsBmB,ODHxB,SAAgCC,GAQnC,OAAOF,YAA8CJ,EAA9CI,EAPiD,SAAC5C,GAAW,IACzDyC,EAAwBzC,EAAxByC,OAAWM,EAD6C,YAChC/C,EADgC,YAG/D,OAAKyC,EACE,kBAACK,EAAqBC,GADT,kBAAC,IAAD,CAAU1C,GAAI,gBCF3BsC,CAGbnB","file":"static/js/4.da7440a9.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__2xRSA\",\"dialogsList\":\"Dialogs_dialogsList__137kM\",\"messagesList\":\"Dialogs_messagesList__3P5tp\",\"active\":\"Dialogs_active__2sQhs\",\"dialog\":\"Dialogs_dialog__lk_cw\",\"sendMessageButton\":\"Dialogs_sendMessageButton__1Dk_w\"};","import React from 'react';\nimport styles from './../Dialogs.module.css';\nimport { NavLink } from 'react-router-dom';\n\ntype PropsType = {\n  id: number\n  name: string\n}\n\nconst DialogItem: React.FC<PropsType> = (props) => {\n  return <div className={styles.dialog + ' ' + styles.active}>\n    <NavLink to={'/dialogs/' + props.id}> {props.name}  </NavLink>\n  </div>\n\n}\n\nexport default DialogItem;\n","import React from 'react';\n\ntype PropsType = {\n  message: string\n}\n\nconst Message: React.FC<PropsType > = (props) => {\n\n  return (\n    <div>\n      {props.message}\n    </div>\n  )\n}\n\nexport default Message;\n","import React from 'react';\nimport styles from './Dialogs.module.css';\nimport DialogItem from './DialogItem/DialogItem'\nimport Message from './Message/Message'\nimport {Field, InjectedFormProps, reduxForm} from 'redux-form'\nimport { required, maxLengthCreator } from '../../validators/validators';\nimport { Textarea } from '../common/FormsControls/FormsControls';\nimport { InitialStateType } from '../../redux/dialogsReducer';\n\ntype PropsType = {\n    dialogsPage: InitialStateType\n    sendMessageActionCreator: (messageText: string ) => void\n}\n\ntype NewMessageFormType = {\n    newMessageText: string\n}\n\ntype NewMessageValuesKeysType = Extract<keyof NewMessageFormType, string>\n\nconst Dialogs: React.FC<PropsType> = (props) => {\n\n  const state = props.dialogsPage;\n\n  const dialogElements = state.dialogs.map(el => <DialogItem name={el.name} key={el.id} id={el.id} />);\n\n  const messagesElements = state.messages.map(msg => <Message message={msg.message} key={msg.id} />);\n\n  const addNewMessage = (values: NewMessageFormType) => {\n    props.sendMessageActionCreator(values.newMessageText)\n  }\n\n  return (\n    <div className={styles.dialogs}>\n      <div className={styles.dialogsList}>\n        <h3>Dialogs</h3>\n        {dialogElements}\n      </div>\n      <div>\n        <div className={styles.messagesList}>\n          <h3>Messages</h3>\n          {messagesElements}\n          <AddMessageReduxForm onSubmit={addNewMessage} />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nconst maxLength50 = maxLengthCreator(50)\n\nconst AddMessageForm: React.FC<InjectedFormProps<NewMessageFormType, {}> & {}> =\n    (props) => {\n  return (\n    <form onSubmit={props.handleSubmit}>\n      <div>\n          {/*{createField<NewMessageValuesKeysType>('Text your message' ,'newMessageText' ,[required, maxLength50], Textarea)}*/}\n        <Field component={Textarea}\n          placeholder={'Text your message'}\n          name={'newMessageText'}\n          validate={[required, maxLength50]}\n        />\n      </div>\n      <div><button className={styles.sendMessageButton}>Send message</button></div>\n    </form>\n  )\n}\n\n\nconst AddMessageReduxForm = reduxForm<NewMessageFormType>({ form: 'dialogsMessageForm' })(AddMessageForm)\n\nexport default Dialogs;\n","import React from 'react'\nimport {Redirect} from 'react-router-dom';\nimport {connect} from 'react-redux';\nimport {AppStateType} from \"../redux/reduxStore\";\n\nlet mapStateToPropsForRedirect = (state: AppStateType) => ({\n    isAuth: state.auth.isAuth\n  })\n\ntype MapPropsTypes = {\n    isAuth: boolean\n}\n\nexport function withAuthRedirect<WCP> (WrappedComponent: React.ComponentType<WCP>) {\n    const RedirectComponent: React.FC<MapPropsTypes & {}> = (props) => {\n        const {isAuth, ...restProps} = props\n\n        if (!isAuth) return <Redirect to={'/login'}/>\n        return <WrappedComponent {...restProps as WCP} />\n    }\n\n    return connect<MapPropsTypes, {}, WCP, AppStateType>(mapStateToPropsForRedirect)(RedirectComponent)\n}","import React from 'react';\nimport { actions } from '../../redux/dialogsReducer'\nimport Dialogs from './Dialogs';\nimport { connect } from 'react-redux';\nimport {withAuthRedirect} from '../../hoc/withAuthRedirect';\nimport { compose } from 'redux';\nimport {AppStateType} from \"../../redux/reduxStore\";\n\nlet mapStateToProps = (state: AppStateType) => {\n\n  return {\n    dialogsPage: state.dialogsPage\n  }\n}\n\nexport default compose<React.ComponentType>(\n  connect(mapStateToProps, {...actions}),\n  withAuthRedirect\n)(Dialogs)\n"],"sourceRoot":""}